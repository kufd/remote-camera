
remote-camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006854  08006854  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e611  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002269  00000000  00000000  0002e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c38  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000097d  00000000  00000000  00031598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021689  00000000  00000000  00031f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fde8  00000000  00000000  0005359e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c76b4  00000000  00000000  00063386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003630  00000000  00000000  0012aa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0012e06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006768 	.word	0x08006768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006768 	.word	0x08006768

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <checkHalStatus>:

static uint8_t mtx_yuv[]={0x80, 0x80, 0x00, 0x22, 0x5E, 0x80};
static uint8_t mtx_rgb[]={0xB3, 0xB3, 0x00, 0x3D, 0xB0, 0xE4};

void checkHalStatus(HAL_StatusTypeDef status)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <checkHalStatus+0x16>
	{
		HAL_StatusTypeDef status2 = status;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	73fb      	strb	r3, [r7, #15]
		return;
 80004d8:	bf00      	nop
	}
}
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <OV7670_Init>:

void OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c/*, LPTIM_HandleTypeDef *p_hlptim*/)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	sp_hdcmi=p_hdcmi;
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <OV7670_Init+0x2c>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi=p_hdma_dcmi;
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <OV7670_Init+0x30>)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	6013      	str	r3, [r2, #0]
	sp_hi2c=p_hi2c;
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <OV7670_Init+0x34>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6013      	str	r3, [r2, #0]
//	sp_hlptim=p_hlptim;
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000008c 	.word	0x2000008c
 8000514:	20000090 	.word	0x20000090
 8000518:	20000094 	.word	0x20000094

0800051c <OV7670_Power>:

void OV7670_Power(uint8_t en)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	if(en)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <OV7670_Power+0x1e>
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <OV7670_Power+0x38>)
 8000534:	f003 feec 	bl	8004310 <HAL_GPIO_WritePin>
 8000538:	e005      	b.n	8000546 <OV7670_Power+0x2a>
	else
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <OV7670_Power+0x38>)
 8000542:	f003 fee5 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000546:	2032      	movs	r0, #50	; 0x32
 8000548:	f001 fca0 	bl	8001e8c <HAL_Delay>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020400 	.word	0x40020400

08000558 <OV7670_ResetHW>:

void OV7670_ResetHW(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <OV7670_ResetHW+0x2c>)
 8000564:	f003 fed4 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f001 fc8f 	bl	8001e8c <HAL_Delay>
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <OV7670_ResetHW+0x2c>)
 8000576:	f003 fecb 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800057a:	2032      	movs	r0, #50	; 0x32
 800057c:	f001 fc86 	bl	8001e8c <HAL_Delay>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40020400 	.word	0x40020400

08000588 <OV7670_XCLK>:

void OV7670_XCLK(uint8_t en)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
//	if(en)
//		HAL_LPTIM_PWM_Start(sp_hlptim, 6,3);//6 3 8mhz
//	else
//		HAL_LPTIM_PWM_Stop(sp_hlptim);
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <OV7670_WriteSCCB>:

void OV7670_WriteSCCB(uint8_t regAddr, uint8_t val)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2]={regAddr, val};
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	733b      	strb	r3, [r7, #12]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, (uint8_t *)txbuf, 2, OV7670_TIMEOUT);
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <OV7670_WriteSCCB+0x44>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f107 020c 	add.w	r2, r7, #12
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2142      	movs	r1, #66	; 0x42
 80005ca:	f003 ffff 	bl	80045cc <HAL_I2C_Master_Transmit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]
	checkHalStatus(res);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff75 	bl	80004c4 <checkHalStatus>
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000094 	.word	0x20000094

080005e8 <OV7670_ReadSCCB>:

void OV7670_ReadSCCB(uint8_t regAddr, uint8_t *data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef resTransmit = HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, OV7670_TIMEOUT);
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <OV7670_ReadSCCB+0x54>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	1dfa      	adds	r2, r7, #7
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2301      	movs	r3, #1
 8000602:	2142      	movs	r1, #66	; 0x42
 8000604:	f003 ffe2 	bl	80045cc <HAL_I2C_Master_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	checkHalStatus(resTransmit);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff58 	bl	80004c4 <checkHalStatus>

	HAL_StatusTypeDef resReceive = HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, OV7670_TIMEOUT);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <OV7670_ReadSCCB+0x54>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	2142      	movs	r1, #66	; 0x42
 8000624:	f004 f8d0 	bl	80047c8 <HAL_I2C_Master_Receive>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]
	checkHalStatus(resReceive);
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff48 	bl	80004c4 <checkHalStatus>
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000094 	.word	0x20000094

08000640 <OV7670_Start>:

void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <OV7670_Start+0x8c>)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <OV7670_Start+0x90>)
 8000656:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <OV7670_Start+0x8c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d118      	bne.n	8000692 <OV7670_Start+0x52>
	{
		HAL_StatusTypeDef res = HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <OV7670_Start+0x94>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <OV7670_Start+0x90>)
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <OV7670_Start+0x98>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <OV7670_Start+0x9c>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	0fda      	lsrs	r2, r3, #31
 8000678:	4413      	add	r3, r2
 800067a:	105b      	asrs	r3, r3, #1
 800067c:	460a      	mov	r2, r1
 800067e:	2102      	movs	r1, #2
 8000680:	f001 fd3a 	bl	80020f8 <HAL_DCMI_Start_DMA>
 8000684:	4603      	mov	r3, r0
 8000686:	73bb      	strb	r3, [r7, #14]
		checkHalStatus(res);
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff1a 	bl	80004c4 <checkHalStatus>
	else
	{
		HAL_StatusTypeDef res = HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
		checkHalStatus(res);
	}
}
 8000690:	e017      	b.n	80006c2 <OV7670_Start+0x82>
		HAL_StatusTypeDef res = HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <OV7670_Start+0x94>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <OV7670_Start+0x90>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <OV7670_Start+0x98>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <OV7670_Start+0x9c>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	0fda      	lsrs	r2, r3, #31
 80006aa:	4413      	add	r3, r2
 80006ac:	105b      	asrs	r3, r3, #1
 80006ae:	460a      	mov	r2, r1
 80006b0:	2100      	movs	r1, #0
 80006b2:	f001 fd21 	bl	80020f8 <HAL_DCMI_Start_DMA>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
		checkHalStatus(res);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff01 	bl	80004c4 <checkHalStatus>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000098 	.word	0x20000098
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000002 	.word	0x20000002

080006e0 <OV7670_ResetSW>:
{
	HAL_DCMI_Stop(sp_hdcmi);
}

void OV7670_ResetSW(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	OV7670_WriteSCCB(REG_COM7, 0x80);
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	2012      	movs	r0, #18
 80006e8:	f7ff ff5a 	bl	80005a0 <OV7670_WriteSCCB>
	HAL_Delay(30);
 80006ec:	201e      	movs	r0, #30
 80006ee:	f001 fbcd 	bl	8001e8c <HAL_Delay>
	OV7670_Config(defaults);
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <OV7670_ResetSW+0x24>)
 80006f4:	f000 f808 	bl	8000708 <OV7670_Config>
	HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f001 fbc7 	bl	8001e8c <HAL_Delay>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	08006818 	.word	0x08006818

08000708 <OV7670_Config>:

void OV7670_Config(const uint8_t params[][2])
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	e012      	b.n	800073c <OV7670_Config+0x34>
	{
		OV7670_WriteSCCB(params[i][0], params[i][1]);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	4619      	mov	r1, r3
 800072c:	f7ff ff38 	bl	80005a0 <OV7670_WriteSCCB>
		HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f001 fbab 	bl	8001e8c <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2bff      	cmp	r3, #255	; 0xff
 8000748:	d1e5      	bne.n	8000716 <OV7670_Config+0xe>
	}
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <OV7670_SetBrightness>:

void OV7670_SetBrightness(uint8_t brightness)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if(brightness>=127)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b7e      	cmp	r3, #126	; 0x7e
 8000762:	d903      	bls.n	800076c <OV7670_SetBrightness+0x18>
		brightness=brightness-127;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	3b7f      	subs	r3, #127	; 0x7f
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	e002      	b.n	8000772 <OV7670_SetBrightness+0x1e>
	else
		brightness=255-brightness;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	43db      	mvns	r3, r3
 8000770:	71fb      	strb	r3, [r7, #7]

	OV7670_WriteSCCB(REG_BRIGHT, brightness);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4619      	mov	r1, r3
 8000776:	2055      	movs	r0, #85	; 0x55
 8000778:	f7ff ff12 	bl	80005a0 <OV7670_WriteSCCB>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <OV7670_SetContrast>:

void OV7670_SetContrast(uint8_t contrast)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_CONTRAS, contrast);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4619      	mov	r1, r3
 8000792:	2056      	movs	r0, #86	; 0x56
 8000794:	f7ff ff04 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <OV7670_SetSaturation>:

void OV7670_SetSaturation(uint8_t saturation)//0-100, default 80
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	float temp=0.0f;
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	saturation+=20;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	3314      	adds	r3, #20
 80007b4:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	72fb      	strb	r3, [r7, #11]
 80007ba:	e03b      	b.n	8000834 <OV7670_SetSaturation+0x94>
	{
		if(img_format==YUV422)temp=(float)mtx_yuv[i];
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <OV7670_SetSaturation+0xac>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <OV7670_SetSaturation+0x38>
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <OV7670_SetSaturation+0xb0>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d2:	edc7 7a03 	vstr	s15, [r7, #12]
 80007d6:	e008      	b.n	80007ea <OV7670_SetSaturation+0x4a>
		else temp=(float)mtx_rgb[i];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <OV7670_SetSaturation+0xb4>)
 80007dc:	5cd3      	ldrb	r3, [r2, r3]
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e6:	edc7 7a03 	vstr	s15, [r7, #12]
		temp*=saturation;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80007f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fc:	edc7 7a03 	vstr	s15, [r7, #12]
		temp/=100;
 8000800:	ed97 7a03 	vldr	s14, [r7, #12]
 8000804:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000858 <OV7670_SetSaturation+0xb8>
 8000808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080c:	edc7 7a03 	vstr	s15, [r7, #12]
		OV7670_WriteSCCB(REG_MTX1+i, (uint8_t)temp);
 8000810:	7afb      	ldrb	r3, [r7, #11]
 8000812:	334f      	adds	r3, #79	; 0x4f
 8000814:	b2db      	uxtb	r3, r3
 8000816:	edd7 7a03 	vldr	s15, [r7, #12]
 800081a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800081e:	edc7 7a00 	vstr	s15, [r7]
 8000822:	783a      	ldrb	r2, [r7, #0]
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff feb9 	bl	80005a0 <OV7670_WriteSCCB>
	for(i=0;i<6;i++)
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	3301      	adds	r3, #1
 8000832:	72fb      	strb	r3, [r7, #11]
 8000834:	7afb      	ldrb	r3, [r7, #11]
 8000836:	2b05      	cmp	r3, #5
 8000838:	d9c0      	bls.n	80007bc <OV7670_SetSaturation+0x1c>
	}
	OV7670_WriteSCCB(REG_MTX_SIGN, 0x9E);
 800083a:	219e      	movs	r1, #158	; 0x9e
 800083c:	2058      	movs	r0, #88	; 0x58
 800083e:	f7ff feaf 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000a0 	.word	0x200000a0
 8000850:	20000004 	.word	0x20000004
 8000854:	2000000c 	.word	0x2000000c
 8000858:	42c80000 	.word	0x42c80000

0800085c <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b06      	cmp	r3, #6
 800086a:	f200 808f 	bhi.w	800098c <OV7670_SetResolution+0x130>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <OV7670_SetResolution+0x18>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000891 	.word	0x08000891
 8000878:	080008b7 	.word	0x080008b7
 800087c:	080008db 	.word	0x080008db
 8000880:	080008fd 	.word	0x080008fd
 8000884:	0800091f 	.word	0x0800091f
 8000888:	08000945 	.word	0x08000945
 800088c:	08000969 	.word	0x08000969
	{
		case VGA:	//NOT TESTED
			OV7670_Config(RES_VGA);
 8000890:	4840      	ldr	r0, [pc, #256]	; (8000994 <OV7670_SetResolution+0x138>)
 8000892:	f7ff ff39 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(158,14,10,490);
 8000896:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 800089a:	220a      	movs	r2, #10
 800089c:	210e      	movs	r1, #14
 800089e:	209e      	movs	r0, #158	; 0x9e
 80008a0:	f000 fd2a 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=640;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <OV7670_SetResolution+0x13c>)
 80008a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80008aa:	801a      	strh	r2, [r3, #0]
			img_height=480;
 80008ac:	4b3b      	ldr	r3, [pc, #236]	; (800099c <OV7670_SetResolution+0x140>)
 80008ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80008b2:	801a      	strh	r2, [r3, #0]
			break;
 80008b4:	e06a      	b.n	800098c <OV7670_SetResolution+0x130>
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 80008b6:	483a      	ldr	r0, [pc, #232]	; (80009a0 <OV7670_SetResolution+0x144>)
 80008b8:	f7ff ff26 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 80008bc:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008c0:	220c      	movs	r2, #12
 80008c2:	2118      	movs	r1, #24
 80008c4:	20a8      	movs	r0, #168	; 0xa8
 80008c6:	f000 fd17 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=320;
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <OV7670_SetResolution+0x13c>)
 80008cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008d0:	801a      	strh	r2, [r3, #0]
			img_height=240;
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <OV7670_SetResolution+0x140>)
 80008d4:	22f0      	movs	r2, #240	; 0xf0
 80008d6:	801a      	strh	r2, [r3, #0]
			break;
 80008d8:	e058      	b.n	800098c <OV7670_SetResolution+0x130>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 80008da:	4832      	ldr	r0, [pc, #200]	; (80009a4 <OV7670_SetResolution+0x148>)
 80008dc:	f7ff ff14 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 80008e0:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80008e4:	220c      	movs	r2, #12
 80008e6:	211e      	movs	r1, #30
 80008e8:	20ae      	movs	r0, #174	; 0xae
 80008ea:	f000 fd05 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=160;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <OV7670_SetResolution+0x13c>)
 80008f0:	22a0      	movs	r2, #160	; 0xa0
 80008f2:	801a      	strh	r2, [r3, #0]
			img_height=120;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <OV7670_SetResolution+0x140>)
 80008f6:	2278      	movs	r2, #120	; 0x78
 80008f8:	801a      	strh	r2, [r3, #0]
			break;
 80008fa:	e047      	b.n	800098c <OV7670_SetResolution+0x130>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <OV7670_SetResolution+0x14c>)
 80008fe:	f7ff ff03 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 8000902:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000906:	220c      	movs	r2, #12
 8000908:	2134      	movs	r1, #52	; 0x34
 800090a:	20c4      	movs	r0, #196	; 0xc4
 800090c:	f000 fcf4 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=80;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <OV7670_SetResolution+0x13c>)
 8000912:	2250      	movs	r2, #80	; 0x50
 8000914:	801a      	strh	r2, [r3, #0]
			img_height=60;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <OV7670_SetResolution+0x140>)
 8000918:	223c      	movs	r2, #60	; 0x3c
 800091a:	801a      	strh	r2, [r3, #0]
			break;
 800091c:	e036      	b.n	800098c <OV7670_SetResolution+0x130>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <OV7670_SetResolution+0x150>)
 8000920:	f7ff fef2 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8000924:	f240 13e9 	movw	r3, #489	; 0x1e9
 8000928:	220c      	movs	r2, #12
 800092a:	215e      	movs	r1, #94	; 0x5e
 800092c:	20ae      	movs	r0, #174	; 0xae
 800092e:	f000 fce3 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=352;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <OV7670_SetResolution+0x13c>)
 8000934:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8000938:	801a      	strh	r2, [r3, #0]
			img_height=288;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <OV7670_SetResolution+0x140>)
 800093c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000940:	801a      	strh	r2, [r3, #0]
			break;
 8000942:	e023      	b.n	800098c <OV7670_SetResolution+0x130>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <OV7670_SetResolution+0x154>)
 8000946:	f7ff fedf 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 800094a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 800094e:	220c      	movs	r2, #12
 8000950:	2116      	movs	r1, #22
 8000952:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 8000956:	f000 fccf 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=176;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <OV7670_SetResolution+0x13c>)
 800095c:	22b0      	movs	r2, #176	; 0xb0
 800095e:	801a      	strh	r2, [r3, #0]
			img_height=144;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <OV7670_SetResolution+0x140>)
 8000962:	2290      	movs	r2, #144	; 0x90
 8000964:	801a      	strh	r2, [r3, #0]
			break;
 8000966:	e011      	b.n	800098c <OV7670_SetResolution+0x130>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <OV7670_SetResolution+0x158>)
 800096a:	f7ff fecd 	bl	8000708 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 800096e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000972:	220c      	movs	r2, #12
 8000974:	212a      	movs	r1, #42	; 0x2a
 8000976:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800097a:	f000 fcbd 	bl	80012f8 <OV7670_SetFrameControl>
			img_width=88;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <OV7670_SetResolution+0x13c>)
 8000980:	2258      	movs	r2, #88	; 0x58
 8000982:	801a      	strh	r2, [r3, #0]
			img_height=72;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <OV7670_SetResolution+0x140>)
 8000986:	2248      	movs	r2, #72	; 0x48
 8000988:	801a      	strh	r2, [r3, #0]
			break;
 800098a:	bf00      	nop
	}
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080067a8 	.word	0x080067a8
 8000998:	20000000 	.word	0x20000000
 800099c:	20000002 	.word	0x20000002
 80009a0:	080067b8 	.word	0x080067b8
 80009a4:	080067c8 	.word	0x080067c8
 80009a8:	080067d8 	.word	0x080067d8
 80009ac:	080067e8 	.word	0x080067e8
 80009b0:	080067f8 	.word	0x080067f8
 80009b4:	08006808 	.word	0x08006808

080009b8 <OV7670_SetColorFormat>:

void OV7670_SetColorFormat(Camera_format format)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_ReadSCCB(REG_COM7, &temp[0]);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	2012      	movs	r0, #18
 80009ca:	f7ff fe0d 	bl	80005e8 <OV7670_ReadSCCB>
	temp[0]&=0b11111010;
 80009ce:	7b3b      	ldrb	r3, [r7, #12]
 80009d0:	f023 0305 	bic.w	r3, r3, #5
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	733b      	strb	r3, [r7, #12]
	OV7670_ReadSCCB(REG_COM15, &temp[1]);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	3301      	adds	r3, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	2040      	movs	r0, #64	; 0x40
 80009e2:	f7ff fe01 	bl	80005e8 <OV7670_ReadSCCB>
	temp[1]&=0b00001111;
 80009e6:	7b7b      	ldrb	r3, [r7, #13]
 80009e8:	f003 030f 	and.w	r3, r3, #15
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 fa4b 	bl	8001e8c <HAL_Delay>
	switch(format)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <OV7670_SetColorFormat+0x4a>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d00e      	beq.n	8000a1e <OV7670_SetColorFormat+0x66>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
			//???
			img_format=RGB565;
			break;
	}
}
 8000a00:	e021      	b.n	8000a46 <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x00);
 8000a02:	7b3b      	ldrb	r3, [r7, #12]
 8000a04:	4619      	mov	r1, r3
 8000a06:	2012      	movs	r0, #18
 8000a08:	f7ff fdca 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x00);
 8000a0c:	7b7b      	ldrb	r3, [r7, #13]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2040      	movs	r0, #64	; 0x40
 8000a12:	f7ff fdc5 	bl	80005a0 <OV7670_WriteSCCB>
			img_format=YUV422;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <OV7670_SetColorFormat+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
			break;
 8000a1c:	e013      	b.n	8000a46 <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x04);//RGB
 8000a1e:	7b3b      	ldrb	r3, [r7, #12]
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	2012      	movs	r0, #18
 8000a2a:	f7ff fdb9 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
 8000a2e:	7b7b      	ldrb	r3, [r7, #13]
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	2040      	movs	r0, #64	; 0x40
 8000a3a:	f7ff fdb1 	bl	80005a0 <OV7670_WriteSCCB>
			img_format=RGB565;
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <OV7670_SetColorFormat+0x98>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
			break;
 8000a44:	bf00      	nop
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000a0 	.word	0x200000a0

08000a54 <OV7670_AutoExposureMode>:

void OV7670_AutoExposureMode(Camera_state en)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000a62:	f107 030f 	add.w	r3, r7, #15
 8000a66:	4619      	mov	r1, r3
 8000a68:	2013      	movs	r0, #19
 8000a6a:	f7ff fdbd 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <OV7670_AutoExposureMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x01);	//enable AEC
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	2013      	movs	r0, #19
 8000a80:	f7ff fd8e 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
}
 8000a84:	e007      	b.n	8000a96 <OV7670_AutoExposureMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f023 0301 	bic.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2013      	movs	r0, #19
 8000a92:	f7ff fd85 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <OV7670_SetAECAlgorithm>:

void OV7670_SetAECAlgorithm(Camera_algorithm algorithm)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_HAECC7, &temp);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	20aa      	movs	r0, #170	; 0xaa
 8000ab4:	f7ff fd98 	bl	80005e8 <OV7670_ReadSCCB>

	if(algorithm)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <OV7670_SetAECAlgorithm+0x32>

		OV7670_WriteSCCB(REG_HAECC7, temp | 0x80);// Histogram-based
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	20aa      	movs	r0, #170	; 0xaa
 8000aca:	f7ff fd69 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
}
 8000ace:	e007      	b.n	8000ae0 <OV7670_SetAECAlgorithm+0x42>
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	20aa      	movs	r0, #170	; 0xaa
 8000adc:	f7ff fd60 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <OV7670_SetExposureTime>:

void OV7670_SetExposureTime(uint16_t time) //AEC must be off
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	OV7670_WriteSCCB(REG_AECHH, (time>>10) & 0x3F);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	0a9b      	lsrs	r3, r3, #10
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	2007      	movs	r0, #7
 8000b04:	f7ff fd4c 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_AECH, (time>>2) & 0xFF);
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	2010      	movs	r0, #16
 8000b14:	f7ff fd44 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_COM1, (time) & 0x03);
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	2004      	movs	r0, #4
 8000b26:	f7ff fd3b 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <OV7670_SetGainCeiling>:

void OV7670_SetGainCeiling(Camera_gain value)//value 0-6 [2x-128x]
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM9, &temp);
 8000b40:	f107 030f 	add.w	r3, r7, #15
 8000b44:	4619      	mov	r1, r3
 8000b46:	2014      	movs	r0, #20
 8000b48:	f7ff fd4e 	bl	80005e8 <OV7670_ReadSCCB>
	temp&=0x8F;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_COM9, temp | (value<<4));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	b25a      	sxtb	r2, r3
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	2014      	movs	r0, #20
 8000b6a:	f7ff fd19 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <OV7670_AutoGainMode>:

void OV7670_AutoGainMode(Camera_state en)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000b84:	f107 030f 	add.w	r3, r7, #15
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2013      	movs	r0, #19
 8000b8c:	f7ff fd2c 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d008      	beq.n	8000ba8 <OV7670_AutoGainMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x04); //enable AGC
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2013      	movs	r0, #19
 8000ba2:	f7ff fcfd 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
}
 8000ba6:	e007      	b.n	8000bb8 <OV7670_AutoGainMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	f023 0304 	bic.w	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	f7ff fcf4 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <OV7670_SetGain>:

void OV7670_SetGain(uint8_t gain)//value 0-7 [1x-128x], AGC must be off
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_VREF, &temp);
 8000bce:	f107 030f 	add.w	r3, r7, #15
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f7ff fd07 	bl	80005e8 <OV7670_ReadSCCB>
	temp&=0x3F;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73fb      	strb	r3, [r7, #15]

	//According to OV7670/7171 implementation guide v1.0 - Table 4-1
	switch(gain)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d86b      	bhi.n	8000cc2 <OV7670_SetGain+0x102>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <OV7670_SetGain+0x30>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c25 	.word	0x08000c25
 8000bf8:	08000c39 	.word	0x08000c39
 8000bfc:	08000c4d 	.word	0x08000c4d
 8000c00:	08000c61 	.word	0x08000c61
 8000c04:	08000c75 	.word	0x08000c75
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000ca9 	.word	0x08000ca9
	{
		case 0: //1x
			OV7670_WriteSCCB(REG_GAIN, 0x00);
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fcc4 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f7ff fcbf 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c22:	e04e      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 1: //2x
			OV7670_WriteSCCB(REG_GAIN, 0x10);
 8000c24:	2110      	movs	r1, #16
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fcba 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2003      	movs	r0, #3
 8000c32:	f7ff fcb5 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c36:	e044      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 2: //4x
			OV7670_WriteSCCB(REG_GAIN, 0x30);
 8000c38:	2130      	movs	r1, #48	; 0x30
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fcb0 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	4619      	mov	r1, r3
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff fcab 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c4a:	e03a      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 3: //8x
			OV7670_WriteSCCB(REG_GAIN, 0x70);
 8000c4c:	2170      	movs	r1, #112	; 0x70
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fca6 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4619      	mov	r1, r3
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f7ff fca1 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c5e:	e030      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 4: //16x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000c60:	21f0      	movs	r1, #240	; 0xf0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fc9c 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f7ff fc97 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c72:	e026      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 5: //32x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000c74:	21f0      	movs	r1, #240	; 0xf0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fc92 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x40);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4619      	mov	r1, r3
 8000c86:	2003      	movs	r0, #3
 8000c88:	f7ff fc8a 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000c8c:	e019      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 6: //64x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000c8e:	21f0      	movs	r1, #240	; 0xf0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fc85 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f7ff fc7d 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000ca6:	e00c      	b.n	8000cc2 <OV7670_SetGain+0x102>
		case 7: //~128x
			OV7670_WriteSCCB(REG_GAIN, 0xFF);
 8000ca8:	21ff      	movs	r1, #255	; 0xff
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fc78 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f7ff fc70 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8000cc0:	bf00      	nop
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop

08000ccc <OV7670_AutoWhiteBalanceMode>:

void OV7670_AutoWhiteBalanceMode(Camera_state en)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000cda:	f107 030f 	add.w	r3, r7, #15
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2013      	movs	r0, #19
 8000ce2:	f7ff fc81 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <OV7670_AutoWhiteBalanceMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x02); //enable AWB
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2013      	movs	r0, #19
 8000cf8:	f7ff fc52 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
}
 8000cfc:	e007      	b.n	8000d0e <OV7670_AutoWhiteBalanceMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4619      	mov	r1, r3
 8000d08:	2013      	movs	r0, #19
 8000d0a:	f7ff fc49 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <OV7670_SetChannelsGain>:

void OV7670_SetChannelsGain(uint8_t r_ch, uint8_t g_ch, uint8_t b_ch) //AWB must be off
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	460b      	mov	r3, r1
 8000d22:	71bb      	strb	r3, [r7, #6]
 8000d24:	4613      	mov	r3, r2
 8000d26:	717b      	strb	r3, [r7, #5]
	OV7670_WriteSCCB(REG_RED, r_ch);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fc37 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_GGAIN, g_ch);
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	4619      	mov	r1, r3
 8000d36:	206a      	movs	r0, #106	; 0x6a
 8000d38:	f7ff fc32 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_BLUE, b_ch);
 8000d3c:	797b      	ldrb	r3, [r7, #5]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fc2d 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <OV7670_ShowColorBar>:

void OV7670_ShowColorBar(Camera_state en)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM17, &temp);
 8000d5c:	f107 030f 	add.w	r3, r7, #15
 8000d60:	4619      	mov	r1, r3
 8000d62:	2042      	movs	r0, #66	; 0x42
 8000d64:	f7ff fc40 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <OV7670_ShowColorBar+0x32>
		OV7670_WriteSCCB(REG_COM17, temp | 0x08);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	2042      	movs	r0, #66	; 0x42
 8000d7a:	f7ff fc11 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
}
 8000d7e:	e007      	b.n	8000d90 <OV7670_ShowColorBar+0x42>
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	f023 0308 	bic.w	r3, r3, #8
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2042      	movs	r0, #66	; 0x42
 8000d8c:	f7ff fc08 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <OV7670_FlipHorizontal>:

void OV7670_FlipHorizontal(Camera_state flipH)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000da6:	f107 030f 	add.w	r3, r7, #15
 8000daa:	4619      	mov	r1, r3
 8000dac:	201e      	movs	r0, #30
 8000dae:	f7ff fc1b 	bl	80005e8 <OV7670_ReadSCCB>

	if(flipH)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <OV7670_FlipHorizontal+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x20);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	201e      	movs	r0, #30
 8000dc4:	f7ff fbec 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
}
 8000dc8:	e007      	b.n	8000dda <OV7670_FlipHorizontal+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f023 0320 	bic.w	r3, r3, #32
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	201e      	movs	r0, #30
 8000dd6:	f7ff fbe3 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <OV7670_FlipVertical>:

void OV7670_FlipVertical(Camera_state flipV)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000df0:	f107 030f 	add.w	r3, r7, #15
 8000df4:	4619      	mov	r1, r3
 8000df6:	201e      	movs	r0, #30
 8000df8:	f7ff fbf6 	bl	80005e8 <OV7670_ReadSCCB>

	if(flipV)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d008      	beq.n	8000e14 <OV7670_FlipVertical+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x10);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	201e      	movs	r0, #30
 8000e0e:	f7ff fbc7 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
}
 8000e12:	e007      	b.n	8000e24 <OV7670_FlipVertical+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f023 0310 	bic.w	r3, r3, #16
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	201e      	movs	r0, #30
 8000e20:	f7ff fbbe 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <OV7670_NightMode>:

void OV7670_NightMode(Camera_state en,	Camera_fps min_fps)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM11, &temp);
 8000e40:	f107 030f 	add.w	r3, r7, #15
 8000e44:	4619      	mov	r1, r3
 8000e46:	203b      	movs	r0, #59	; 0x3b
 8000e48:	f7ff fbce 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d011      	beq.n	8000e76 <OV7670_NightMode+0x4a>
	{
		temp|=(min_fps<<5);
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	73fb      	strb	r3, [r7, #15]
		OV7670_WriteSCCB(REG_COM11, temp | 0x80);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	203b      	movs	r0, #59	; 0x3b
 8000e70:	f7ff fb96 	bl	80005a0 <OV7670_WriteSCCB>
	}
	else
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
}
 8000e74:	e007      	b.n	8000e86 <OV7670_NightMode+0x5a>
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	203b      	movs	r0, #59	; 0x3b
 8000e82:	f7ff fb8d 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <OV7670_AutoSharpness>:

void OV7670_AutoSharpness(Camera_state en)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8000e9c:	f107 030f 	add.w	r3, r7, #15
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2041      	movs	r0, #65	; 0x41
 8000ea4:	f7ff fba0 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <OV7670_AutoSharpness+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x20);// enable Auto Sharpness
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	2041      	movs	r0, #65	; 0x41
 8000eba:	f7ff fb71 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
}
 8000ebe:	e007      	b.n	8000ed0 <OV7670_AutoSharpness+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f023 0320 	bic.w	r3, r3, #32
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2041      	movs	r0, #65	; 0x41
 8000ecc:	f7ff fb68 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <OV7670_SetSharpness>:

void OV7670_SetSharpness(uint8_t sharpness)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_EDGE, &temp);
 8000ee6:	f107 030f 	add.w	r3, r7, #15
 8000eea:	4619      	mov	r1, r3
 8000eec:	203f      	movs	r0, #63	; 0x3f
 8000eee:	f7ff fb7b 	bl	80005e8 <OV7670_ReadSCCB>
	temp&=0xE0;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f023 031f 	bic.w	r3, r3, #31
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_EDGE, temp | sharpness);
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f7ff fb4a 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <OV7670_AutoDeNoise>:

void OV7670_AutoDeNoise(Camera_state en)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8000f22:	f107 030f 	add.w	r3, r7, #15
 8000f26:	4619      	mov	r1, r3
 8000f28:	2041      	movs	r0, #65	; 0x41
 8000f2a:	f7ff fb5d 	bl	80005e8 <OV7670_ReadSCCB>

	if(en)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <OV7670_AutoDeNoise+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x10);// enable Auto Sharpness
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2041      	movs	r0, #65	; 0x41
 8000f40:	f7ff fb2e 	bl	80005a0 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
}
 8000f44:	e007      	b.n	8000f56 <OV7670_AutoDeNoise+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f023 0310 	bic.w	r3, r3, #16
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2041      	movs	r0, #65	; 0x41
 8000f52:	f7ff fb25 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <OV7670_SetDeNoiseStrength>:

void OV7670_SetDeNoiseStrength(uint8_t strength)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_DNSTH, strength);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	204c      	movs	r0, #76	; 0x4c
 8000f6e:	f7ff fb17 	bl	80005a0 <OV7670_WriteSCCB>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <OV7670_BandingFilter>:

void OV7670_BandingFilter(Camera_state en, Camera_filter filter)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	460a      	mov	r2, r1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	4613      	mov	r3, r2
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000f8e:	f107 030f 	add.w	r3, r7, #15
 8000f92:	4619      	mov	r1, r3
 8000f94:	2013      	movs	r0, #19
 8000f96:	f7ff fb27 	bl	80005e8 <OV7670_ReadSCCB>
	if(en)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d03f      	beq.n	8001020 <OV7670_BandingFilter+0xa6>
	{
		OV7670_WriteSCCB(REG_BD50ST, BF_50Hz_VALUE); //50Hz banding filter
 8000fa0:	21cc      	movs	r1, #204	; 0xcc
 8000fa2:	209d      	movs	r0, #157	; 0x9d
 8000fa4:	f7ff fafc 	bl	80005a0 <OV7670_WriteSCCB>
		OV7670_WriteSCCB(REG_BD60ST, BF_60Hz_VALUE); //60Hz banding filter
 8000fa8:	21aa      	movs	r1, #170	; 0xaa
 8000faa:	209e      	movs	r0, #158	; 0x9e
 8000fac:	f7ff faf8 	bl	80005a0 <OV7670_WriteSCCB>

		OV7670_WriteSCCB(REG_COM8, temp | 0x20); //banding filter enable
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2013      	movs	r0, #19
 8000fbc:	f7ff faf0 	bl	80005a0 <OV7670_WriteSCCB>

		OV7670_ReadSCCB(REG_COM11, &temp);
 8000fc0:	f107 030f 	add.w	r3, r7, #15
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	203b      	movs	r0, #59	; 0x3b
 8000fc8:	f7ff fb0e 	bl	80005e8 <OV7670_ReadSCCB>
		temp&=0xE7;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f023 0318 	bic.w	r3, r3, #24
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	73fb      	strb	r3, [r7, #15]
		switch(filter)
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d018      	beq.n	800100e <OV7670_BandingFilter+0x94>
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	dc28      	bgt.n	8001032 <OV7670_BandingFilter+0xb8>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <OV7670_BandingFilter+0x70>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d009      	beq.n	8000ffc <OV7670_BandingFilter+0x82>
				break;
		}
	}
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
}
 8000fe8:	e023      	b.n	8001032 <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x0A);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 030a 	orr.w	r3, r3, #10
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	203b      	movs	r0, #59	; 0x3b
 8000ff6:	f7ff fad3 	bl	80005a0 <OV7670_WriteSCCB>
				break;
 8000ffa:	e01a      	b.n	8001032 <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x02);
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4619      	mov	r1, r3
 8001006:	203b      	movs	r0, #59	; 0x3b
 8001008:	f7ff faca 	bl	80005a0 <OV7670_WriteSCCB>
				break;
 800100c:	e011      	b.n	8001032 <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x12);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f043 0312 	orr.w	r3, r3, #18
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	203b      	movs	r0, #59	; 0x3b
 800101a:	f7ff fac1 	bl	80005a0 <OV7670_WriteSCCB>
				break;
 800101e:	e008      	b.n	8001032 <OV7670_BandingFilter+0xb8>
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	f023 0320 	bic.w	r3, r3, #32
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4619      	mov	r1, r3
 800102a:	2013      	movs	r0, #19
 800102c:	f7ff fab8 	bl	80005a0 <OV7670_WriteSCCB>
}
 8001030:	e7ff      	b.n	8001032 <OV7670_BandingFilter+0xb8>
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <OV7670_SpecialEffect>:

void OV7670_SpecialEffect(Camera_effect effect)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_TSLB, &temp);
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	4619      	mov	r1, r3
 8001050:	203a      	movs	r0, #58	; 0x3a
 8001052:	f7ff fac9 	bl	80005e8 <OV7670_ReadSCCB>
	temp&=0xCB;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f023 0334 	bic.w	r3, r3, #52	; 0x34
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]

	switch(effect)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b07      	cmp	r3, #7
 8001064:	f200 808c 	bhi.w	8001180 <OV7670_SpecialEffect+0x144>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <OV7670_SpecialEffect+0x34>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001091 	.word	0x08001091
 8001074:	080010a3 	.word	0x080010a3
 8001078:	080010c5 	.word	0x080010c5
 800107c:	080010e7 	.word	0x080010e7
 8001080:	080010f9 	.word	0x080010f9
 8001084:	0800111b 	.word	0x0800111b
 8001088:	0800113d 	.word	0x0800113d
 800108c:	0800115f 	.word	0x0800115f
	{
		case NORMAL:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x04);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	203a      	movs	r0, #58	; 0x3a
 800109c:	f7ff fa80 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 80010a0:	e06e      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case ANTIQUE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f043 0314 	orr.w	r3, r3, #20
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	203a      	movs	r0, #58	; 0x3a
 80010ae:	f7ff fa77 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xA0);
 80010b2:	21a0      	movs	r1, #160	; 0xa0
 80010b4:	2067      	movs	r0, #103	; 0x67
 80010b6:	f7ff fa73 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	2068      	movs	r0, #104	; 0x68
 80010be:	f7ff fa6f 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 80010c2:	e05d      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case BW:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f043 0314 	orr.w	r3, r3, #20
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	203a      	movs	r0, #58	; 0x3a
 80010d0:	f7ff fa66 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	2067      	movs	r0, #103	; 0x67
 80010d8:	f7ff fa62 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	2068      	movs	r0, #104	; 0x68
 80010e0:	f7ff fa5e 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 80010e4:	e04c      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x24);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	203a      	movs	r0, #58	; 0x3a
 80010f2:	f7ff fa55 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 80010f6:	e043      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case BW_NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x34);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	203a      	movs	r0, #58	; 0x3a
 8001104:	f7ff fa4c 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	2067      	movs	r0, #103	; 0x67
 800110c:	f7ff fa48 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	2068      	movs	r0, #104	; 0x68
 8001114:	f7ff fa44 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 8001118:	e032      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case BLUISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0314 	orr.w	r3, r3, #20
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	203a      	movs	r0, #58	; 0x3a
 8001126:	f7ff fa3b 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	2067      	movs	r0, #103	; 0x67
 800112e:	f7ff fa37 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0xC0);
 8001132:	21c0      	movs	r1, #192	; 0xc0
 8001134:	2068      	movs	r0, #104	; 0x68
 8001136:	f7ff fa33 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 800113a:	e021      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case GREENISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f043 0314 	orr.w	r3, r3, #20
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	203a      	movs	r0, #58	; 0x3a
 8001148:	f7ff fa2a 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x40);
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	2067      	movs	r0, #103	; 0x67
 8001150:	f7ff fa26 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	2068      	movs	r0, #104	; 0x68
 8001158:	f7ff fa22 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 800115c:	e010      	b.n	8001180 <OV7670_SpecialEffect+0x144>
		case REDDISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f043 0314 	orr.w	r3, r3, #20
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4619      	mov	r1, r3
 8001168:	203a      	movs	r0, #58	; 0x3a
 800116a:	f7ff fa19 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xC0);
 800116e:	21c0      	movs	r1, #192	; 0xc0
 8001170:	2067      	movs	r0, #103	; 0x67
 8001172:	f7ff fa15 	bl	80005a0 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	2068      	movs	r0, #104	; 0x68
 800117a:	f7ff fa11 	bl	80005a0 <OV7670_WriteSCCB>
			break;
 800117e:	bf00      	nop
	}
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <OV7670_SetFrameRate>:

void OV7670_SetFrameRate(uint8_t div, uint8_t mul)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
	OV7670_WriteSCCB(REG_CLKRC, 0x80 | div);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	2011      	movs	r0, #17
 80011a4:	f7ff f9fc 	bl	80005a0 <OV7670_WriteSCCB>
	HAL_Delay(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 fe6f 	bl	8001e8c <HAL_Delay>
	OV7670_WriteSCCB(REG_DBLV, 0x08 | mul);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	206b      	movs	r0, #107	; 0x6b
 80011ba:	f7ff f9f1 	bl	80005a0 <OV7670_WriteSCCB>
	HAL_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 fe64 	bl	8001e8c <HAL_Delay>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <OV7670_PowerUp>:
	OV7670_XCLK(OFF);
	OV7670_Power(OFF);
}

void OV7670_PowerUp(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	OV7670_Power(ON);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff f9a3 	bl	800051c <OV7670_Power>
	OV7670_XCLK(ON);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff f9d6 	bl	8000588 <OV7670_XCLK>
	OV7670_ResetHW();
 80011dc:	f7ff f9bc 	bl	8000558 <OV7670_ResetHW>
	OV7670_ResetSW();
 80011e0:	f7ff fa7e 	bl	80006e0 <OV7670_ResetSW>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <OV7670_UpdateSettings>:

void OV7670_UpdateSettings(Camera_settings OV7670)
{
 80011e8:	b084      	sub	sp, #16
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	f107 0c08 	add.w	ip, r7, #8
 80011f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	OV7670_SetResolution(OV7670.resolution);
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fb2f 	bl	800085c <OV7670_SetResolution>

	if(OV7670.format) OV7670_SetColorFormat(RGB565);
 80011fe:	7a7b      	ldrb	r3, [r7, #9]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <OV7670_UpdateSettings+0x24>
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fbd7 	bl	80009b8 <OV7670_SetColorFormat>
 800120a:	e002      	b.n	8001212 <OV7670_UpdateSettings+0x2a>
	else OV7670_SetColorFormat(YUV422);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fbd3 	bl	80009b8 <OV7670_SetColorFormat>

	OV7670_SpecialEffect(OV7670.effect);
 8001212:	7abb      	ldrb	r3, [r7, #10]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff11 	bl	800103c <OV7670_SpecialEffect>
	OV7670_AutoExposureMode(OV7670.AEC);
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fc19 	bl	8000a54 <OV7670_AutoExposureMode>
	if(!OV7670.AEC) OV7670_SetExposureTime(OV7670.exposure);
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <OV7670_UpdateSettings+0x48>
 8001228:	8b3b      	ldrh	r3, [r7, #24]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fc5c 	bl	8000ae8 <OV7670_SetExposureTime>
	OV7670_SetAECAlgorithm(OV7670.algorithm);
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc33 	bl	8000a9e <OV7670_SetAECAlgorithm>

	OV7670_AutoGainMode(OV7670.AGC);
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fc9b 	bl	8000b76 <OV7670_AutoGainMode>
	if(!OV7670.AGC) OV7670_SetGain(OV7670.gain);
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <OV7670_UpdateSettings+0x66>
 8001246:	7ebb      	ldrb	r3, [r7, #26]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcb9 	bl	8000bc0 <OV7670_SetGain>

	OV7670_AutoWhiteBalanceMode(OV7670.AWB);
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd3b 	bl	8000ccc <OV7670_AutoWhiteBalanceMode>
	if(!OV7670.AWB) OV7670_SetChannelsGain(OV7670.rch_gain, OV7670.gch_gain, OV7670.bch_gain);
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <OV7670_UpdateSettings+0x86>
 800125c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001260:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001264:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd54 	bl	8000d16 <OV7670_SetChannelsGain>

	OV7670_SetBrightness(OV7670.brightness);
 800126e:	7efb      	ldrb	r3, [r7, #27]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fa6f 	bl	8000754 <OV7670_SetBrightness>
	OV7670_SetContrast(OV7670.contrast);
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa83 	bl	8000784 <OV7670_SetContrast>
	OV7670_SetSaturation(OV7670.saturation);
 800127e:	7f7b      	ldrb	r3, [r7, #29]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fa8d 	bl	80007a0 <OV7670_SetSaturation>

	OV7670_AutoSharpness(OV7670.ASC);
 8001286:	7cbb      	ldrb	r3, [r7, #18]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe00 	bl	8000e8e <OV7670_AutoSharpness>
	if(!OV7670.ASC) OV7670_SetSharpness(OV7670.sharpness);
 800128e:	7cbb      	ldrb	r3, [r7, #18]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <OV7670_UpdateSettings+0xb4>
 8001294:	7fbb      	ldrb	r3, [r7, #30]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe1e 	bl	8000ed8 <OV7670_SetSharpness>

	OV7670_SetGainCeiling(OV7670.gain_ceiling);
 800129c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fc46 	bl	8000b32 <OV7670_SetGainCeiling>

	OV7670_FlipHorizontal(OV7670.h_flip);
 80012a6:	7c3b      	ldrb	r3, [r7, #16]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd75 	bl	8000d98 <OV7670_FlipHorizontal>
	OV7670_FlipVertical(OV7670.v_flip);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fd96 	bl	8000de2 <OV7670_FlipVertical>
	OV7670_ShowColorBar(OV7670.cbar);
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd48 	bl	8000d4e <OV7670_ShowColorBar>
	OV7670_NightMode(OV7670.night_mode, OV7670.night_mode_fps);
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	7dba      	ldrb	r2, [r7, #22]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fdb1 	bl	8000e2c <OV7670_NightMode>

	OV7670_AutoDeNoise(OV7670.ADN);
 80012ca:	7cfb      	ldrb	r3, [r7, #19]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe21 	bl	8000f14 <OV7670_AutoDeNoise>
	if(!OV7670.ADN)OV7670_SetDeNoiseStrength(OV7670.strength);
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <OV7670_UpdateSettings+0xf8>
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe3f 	bl	8000f5e <OV7670_SetDeNoiseStrength>

	OV7670_BandingFilter(OV7670.BDF, OV7670.bd_filter_value);
 80012e0:	7d3b      	ldrb	r3, [r7, #20]
 80012e2:	7dfa      	ldrb	r2, [r7, #23]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fe47 	bl	8000f7a <OV7670_BandingFilter>
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f4:	b004      	add	sp, #16
 80012f6:	4770      	bx	lr

080012f8 <OV7670_SetFrameControl>:

void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4604      	mov	r4, r0
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4623      	mov	r3, r4
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	4603      	mov	r3, r0
 800130c:	80bb      	strh	r3, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]
 8001312:	4613      	mov	r3, r2
 8001314:	803b      	strh	r3, [r7, #0]
	OV7670_WriteSCCB(REG_HSTART, (hstart >> 3) & 0xff);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	b29b      	uxth	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	2017      	movs	r0, #23
 8001322:	f7ff f93d 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HSTOP, (hstop >> 3) & 0xff);
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b29b      	uxth	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	2018      	movs	r0, #24
 8001332:	f7ff f935 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	b25b      	sxtb	r3, r3
 800133c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001340:	b25a      	sxtb	r2, r3
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	2032      	movs	r0, #50	; 0x32
 8001356:	f7ff f923 	bl	80005a0 <OV7670_WriteSCCB>

	OV7670_WriteSCCB(REG_VSTART, (vstart >> 2) & 0xff);
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	2019      	movs	r0, #25
 8001366:	f7ff f91b 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VSTOP, (vstop >> 2) & 0xff);
 800136a:	883b      	ldrh	r3, [r7, #0]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	201a      	movs	r0, #26
 8001376:	f7ff f913 	bl	80005a0 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 800137a:	883b      	ldrh	r3, [r7, #0]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	b25a      	sxtb	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	b25b      	sxtb	r3, r3
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff f901 	bl	80005a0 <OV7670_WriteSCCB>
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
	...

080013a8 <OV7670_getImageInfo>:
	*time_num=(int)(time);
	*time_fract=(int)((time-(*time_num))*10);
}

void OV7670_getImageInfo(uint16_t *width, uint16_t *height, uint8_t *format)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	*width=img_width;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <OV7670_getImageInfo+0x30>)
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	801a      	strh	r2, [r3, #0]
	*height=img_height;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <OV7670_getImageInfo+0x34>)
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	801a      	strh	r2, [r3, #0]
	*format=img_format;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <OV7670_getImageInfo+0x38>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000002 	.word	0x20000002
 80013e0:	200000a0 	.word	0x200000a0

080013e4 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(capture_mode==CONTINUOUS)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_DCMI_FrameEventCallback+0x50>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11b      	bne.n	800142c <HAL_DCMI_FrameEventCallback+0x48>
	{
		HAL_StatusTypeDef res = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3328      	adds	r3, #40	; 0x28
 80013fe:	461c      	mov	r4, r3
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_DCMI_FrameEventCallback+0x54>)
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_DCMI_FrameEventCallback+0x58>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_DCMI_FrameEventCallback+0x5c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	0fda      	lsrs	r2, r3, #31
 8001414:	4413      	add	r3, r2
 8001416:	105b      	asrs	r3, r3, #1
 8001418:	460a      	mov	r2, r1
 800141a:	4621      	mov	r1, r4
 800141c:	f001 f970 	bl	8002700 <HAL_DMA_Start_IT>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
		checkHalStatus(res);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f84c 	bl	80004c4 <checkHalStatus>
	}
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	20000098 	.word	0x20000098
 8001438:	2000009c 	.word	0x2000009c
 800143c:	20000000 	.word	0x20000000
 8001440:	20000002 	.word	0x20000002

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001448:	b094      	sub	sp, #80	; 0x50
 800144a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fcac 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f8c2 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 f9d2 	bl	80017fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001458:	f000 f9b0 	bl	80017bc <MX_DMA_Init>
  MX_DCMI_Init();
 800145c:	f000 f92e 	bl	80016bc <MX_DCMI_Init>
  MX_I2C1_Init();
 8001460:	f000 f954 	bl	800170c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001464:	f000 f980 	bl	8001768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t width, height;
  uint8_t format;

  uint16_t pixelsNumber = 160*120;
 8001468:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800146c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint32_t image_data[pixelsNumber/2];
 800146e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	1e4b      	subs	r3, r1, #1
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
 800147a:	460a      	mov	r2, r1
 800147c:	2300      	movs	r3, #0
 800147e:	4690      	mov	r8, r2
 8001480:	4699      	mov	r9, r3
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800148e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001492:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001496:	460a      	mov	r2, r1
 8001498:	2300      	movs	r3, #0
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	016b      	lsls	r3, r5, #5
 80014a8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80014ac:	0162      	lsls	r2, r4, #5
 80014ae:	460b      	mov	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	3307      	adds	r3, #7
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	ebad 0d03 	sub.w	sp, sp, r3
 80014bc:	ab04      	add	r3, sp, #16
 80014be:	3303      	adds	r3, #3
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34


  Camera_settings OV7670_settings={
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <main+0x178>)
 80014c8:	f107 0410 	add.w	r4, r7, #16
 80014cc:	461d      	mov	r5, r3
 80014ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  		103, 		//G channel gain - byte
  		153			//B channel gain - byte
  };


	OV7670_Power(OFF);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff f81e 	bl	800051c <OV7670_Power>

	HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f000 fcd2 	bl	8001e8c <HAL_Delay>

	//I2C2 is used for SCCB and LPTIM1 for XLCK generation
	OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1);
 80014e8:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <main+0x17c>)
 80014ea:	4936      	ldr	r1, [pc, #216]	; (80015c4 <main+0x180>)
 80014ec:	4836      	ldr	r0, [pc, #216]	; (80015c8 <main+0x184>)
 80014ee:	f7fe fff9 	bl	80004e4 <OV7670_Init>

	HAL_Delay(500);
 80014f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f6:	f000 fcc9 	bl	8001e8c <HAL_Delay>

	OV7670_PowerUp();
 80014fa:	f7ff fe67 	bl	80011cc <OV7670_PowerUp>

	HAL_Delay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001502:	f000 fcc3 	bl	8001e8c <HAL_Delay>

	OV7670_UpdateSettings(OV7670_settings);
 8001506:	466c      	mov	r4, sp
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151a:	f7ff fe65 	bl	80011e8 <OV7670_UpdateSettings>

	HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f000 fcb3 	bl	8001e8c <HAL_Delay>

	OV7670_SetFrameRate(XCLK_DIV(1), BYPASS_PLL);
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fe2d 	bl	8001188 <OV7670_SetFrameRate>


	HAL_Delay(500);
 800152e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001532:	f000 fcab 	bl	8001e8c <HAL_Delay>

//	OV7670_Start(SNAPSHOT, image_data);

	HAL_Delay(500);
 8001536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153a:	f000 fca7 	bl	8001e8c <HAL_Delay>

	OV7670_getImageInfo(&width,&height,&format);
 800153e:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8001542:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8001546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff2c 	bl	80013a8 <OV7670_getImageInfo>
	HAL_Delay(500);
 8001550:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001554:	f000 fc9a 	bl	8001e8c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (image_data[0] == 0)
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <main+0x124>
	  {
		  OV7670_Start(SNAPSHOT, image_data);
 8001560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff f86c 	bl	8000640 <OV7670_Start>
	  }


	  if (image_data[0] != 0)
 8001568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f3      	beq.n	8001558 <main+0x114>
	  {
		  uint8_t delimiter[10] = {0,1,2,3,4,5,6,7,8,9};
 8001570:	4a16      	ldr	r2, [pc, #88]	; (80015cc <main+0x188>)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	ca07      	ldmia	r2, {r0, r1, r2}
 8001576:	c303      	stmia	r3!, {r0, r1}
 8001578:	801a      	strh	r2, [r3, #0]
		  HAL_StatusTypeDef res = HAL_UART_Transmit(&huart2, delimiter, 10, 120000);
 800157a:	1d39      	adds	r1, r7, #4
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <main+0x18c>)
 800157e:	220a      	movs	r2, #10
 8001580:	4814      	ldr	r0, [pc, #80]	; (80015d4 <main+0x190>)
 8001582:	f004 fc29 	bl	8005dd8 <HAL_UART_Transmit>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


		  res = HAL_UART_Transmit(&huart2, (uint8_t *) image_data, 2 * pixelsNumber, 120000);
 800158c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <main+0x18c>)
 8001594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <main+0x190>)
 8001598:	f004 fc1e 	bl	8005dd8 <HAL_UART_Transmit>
 800159c:	4603      	mov	r3, r0
 800159e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  memset(image_data, 0, 2 * pixelsNumber);
 80015a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	461a      	mov	r2, r3
 80015a8:	2100      	movs	r1, #0
 80015aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015ac:	f005 f898 	bl	80066e0 <memset>

		  HAL_Delay(5000);
 80015b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80015b4:	f000 fc6a 	bl	8001e8c <HAL_Delay>
	  if (image_data[0] == 0)
 80015b8:	e7ce      	b.n	8001558 <main+0x114>
 80015ba:	bf00      	nop
 80015bc:	08006780 	.word	0x08006780
 80015c0:	20000144 	.word	0x20000144
 80015c4:	200000e4 	.word	0x200000e4
 80015c8:	200000a4 	.word	0x200000a4
 80015cc:	0800679c 	.word	0x0800679c
 80015d0:	0001d4c0 	.word	0x0001d4c0
 80015d4:	20000198 	.word	0x20000198

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 f87a 	bl	80066e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <SystemClock_Config+0xdc>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <SystemClock_Config+0xdc>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <SystemClock_Config+0xdc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <SystemClock_Config+0xe0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <SystemClock_Config+0xe0>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <SystemClock_Config+0xe0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163e:	2301      	movs	r3, #1
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001642:	2310      	movs	r3, #16
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001650:	2304      	movs	r3, #4
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001654:	23a8      	movs	r3, #168	; 0xa8
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001658:	2302      	movs	r3, #2
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800165c:	2304      	movs	r3, #4
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fe67 	bl	8005338 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001670:	f000 f946 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001674:	230f      	movs	r3, #15
 8001676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2105      	movs	r1, #5
 8001692:	4618      	mov	r0, r3
 8001694:	f004 f8c8 	bl	8005828 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800169e:	f000 f92f 	bl	8001900 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2000      	movs	r0, #0
 80016a8:	f004 f9a4 	bl	80059f4 <HAL_RCC_MCOConfig>
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	; 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_DCMI_Init+0x48>)
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <MX_DCMI_Init+0x4c>)
 80016c4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_DCMI_Init+0x48>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_DCMI_Init+0x48>)
 80016ce:	2220      	movs	r2, #32
 80016d0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_DCMI_Init+0x48>)
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_DCMI_Init+0x48>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_DCMI_Init+0x48>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_DCMI_Init+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_DCMI_Init+0x48>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_DCMI_Init+0x48>)
 80016f2:	f000 fee9 	bl	80024c8 <HAL_DCMI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80016fc:	f000 f900 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200000a4 	.word	0x200000a4
 8001708:	50050000 	.word	0x50050000

0800170c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C1_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_I2C1_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C1_Init+0x50>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_I2C1_Init+0x58>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_I2C1_Init+0x50>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_I2C1_Init+0x50>)
 800174a:	f002 fdfb 	bl	8004344 <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001754:	f000 f8d4 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000144 	.word	0x20000144
 8001760:	40005400 	.word	0x40005400
 8001764:	000186a0 	.word	0x000186a0

08001768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f004 faca 	bl	8005d38 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f000 f8a9 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000198 	.word	0x20000198
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_DMA_Init+0x3c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <MX_DMA_Init+0x3c>)
 80017cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_DMA_Init+0x3c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2039      	movs	r0, #57	; 0x39
 80017e4:	f000 fc51 	bl	800208a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017e8:	2039      	movs	r0, #57	; 0x39
 80017ea:	f000 fc6a 	bl	80020c2 <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <MX_GPIO_Init+0xf8>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <MX_GPIO_Init+0xf8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_GPIO_Init+0xf8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <MX_GPIO_Init+0xf8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_GPIO_Init+0xf8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAMERA_RESET_Pin|CAMERA_POWER_DOWN_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80018a4:	4814      	ldr	r0, [pc, #80]	; (80018f8 <MX_GPIO_Init+0xfc>)
 80018a6:	f002 fd33 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAMERA_RESET_Pin CAMERA_POWER_DOWN_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|CAMERA_POWER_DOWN_Pin;
 80018aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_GPIO_Init+0xfc>)
 80018c4:	f002 fb88 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_GPIO_Init+0x100>)
 80018e6:	f002 fb77 	bl	8003fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020000 	.word	0x40020000

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>
	...

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_MspInit+0x4c>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x4c>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_DCMI_MspInit+0x1ac>)
 800197a:	4293      	cmp	r3, r2
 800197c:	f040 80bf 	bne.w	8001afe <HAL_DCMI_MspInit+0x1a2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6353      	str	r3, [r2, #52]	; 0x34
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	4b5a      	ldr	r3, [pc, #360]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a59      	ldr	r2, [pc, #356]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_DCMI_MspInit+0x1b0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a0c:	2370      	movs	r3, #112	; 0x70
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a14:	2302      	movs	r3, #2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a1c:	230d      	movs	r3, #13
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	483a      	ldr	r0, [pc, #232]	; (8001b10 <HAL_DCMI_MspInit+0x1b4>)
 8001a28:	f002 fad6 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001a2c:	2350      	movs	r3, #80	; 0x50
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a34:	2302      	movs	r3, #2
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a3c:	230d      	movs	r3, #13
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4833      	ldr	r0, [pc, #204]	; (8001b14 <HAL_DCMI_MspInit+0x1b8>)
 8001a48:	f002 fac6 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a4c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a56:	2302      	movs	r3, #2
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a5e:	230d      	movs	r3, #13
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482b      	ldr	r0, [pc, #172]	; (8001b18 <HAL_DCMI_MspInit+0x1bc>)
 8001a6a:	f002 fab5 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a76:	2302      	movs	r3, #2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a7e:	230d      	movs	r3, #13
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4824      	ldr	r0, [pc, #144]	; (8001b1c <HAL_DCMI_MspInit+0x1c0>)
 8001a8a:	f002 faa5 	bl	8003fd8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_DCMI_MspInit+0x1c8>)
 8001a92:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ad4:	f000 fd66 	bl	80025a4 <HAL_DMA_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_DCMI_MspInit+0x186>
    {
      Error_Handler();
 8001ade:	f7ff ff0f 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_DCMI_MspInit+0x1c4>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	204e      	movs	r0, #78	; 0x4e
 8001af4:	f000 fac9 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001af8:	204e      	movs	r0, #78	; 0x4e
 8001afa:	f000 fae2 	bl	80020c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	50050000 	.word	0x50050000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	200000e4 	.word	0x200000e4
 8001b24:	40026428 	.word	0x40026428

08001b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_I2C_MspInit+0x84>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12c      	bne.n	8001ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6c:	2312      	movs	r3, #18
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <HAL_I2C_MspInit+0x8c>)
 8001b84:	f002 fa28 	bl	8003fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_I2C_MspInit+0x88>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_UART_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12b      	bne.n	8001c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_UART_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = IMG_TX_Pin|IMG_RX_NOT_USED_Pin;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c22:	2307      	movs	r3, #7
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_UART_MspInit+0x8c>)
 8001c2e:	f002 f9d3 	bl	8003fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40004400 	.word	0x40004400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f8da 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA2_Stream1_IRQHandler+0x10>)
 8001ca2:	f000 fda7 	bl	80027f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200000e4 	.word	0x200000e4

08001cb0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <DCMI_IRQHandler+0x10>)
 8001cb6:	f000 fabf 	bl	8002238 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000a4 	.word	0x200000a4

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f004 fd0c 	bl	8006710 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20020000 	.word	0x20020000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	200001e0 	.word	0x200001e0
 8001d2c:	20000340 	.word	0x20000340

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d58:	f7ff ffea 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d5e:	490d      	ldr	r1, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d74:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f004 fccb 	bl	800671c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d86:	f7ff fb5d 	bl	8001444 <main>
  bx  lr    
 8001d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d98:	08006860 	.word	0x08006860
  ldr r2, =_sbss
 8001d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001da0:	20000340 	.word	0x20000340

08001da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <HAL_Init+0x40>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_Init+0x40>)
 8001dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_Init+0x40>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f94f 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fd96 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f967 	bl	80020de <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e28:	f000 f92f 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000014 	.word	0x20000014
 8001e44:	2000001c 	.word	0x2000001c
 8001e48:	20000018 	.word	0x20000018

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000001c 	.word	0x2000001c
 8001e70:	200001e4 	.word	0x200001e4

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200001e4 	.word	0x200001e4

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000001c 	.word	0x2000001c

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
         );
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002054:	f7ff ff8e 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff29 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff3e 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff8e 	bl	8001fc8 <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5d 	bl	8001f74 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff31 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa2 	bl	8002030 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_DCMI_Start_DMA+0x20>
 8002114:	2302      	movs	r3, #2
 8002116:	e086      	b.n	8002226 <HAL_DCMI_Start_DMA+0x12e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002136:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0202 	bic.w	r2, r2, #2
 8002146:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_DCMI_Start_DMA+0x138>)
 800215e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_DCMI_Start_DMA+0x13c>)
 8002166:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	2200      	movs	r2, #0
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d20a      	bcs.n	800219a <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3328      	adds	r3, #40	; 0x28
 800218e:	4619      	mov	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	f000 fab4 	bl	8002700 <HAL_DMA_Start_IT>
 8002198:	e038      	b.n	800220c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_DCMI_Start_DMA+0x138>)
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80021b4:	e009      	b.n	80021ca <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	085a      	lsrs	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	005a      	lsls	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d2f0      	bcs.n	80021b6 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	1e9a      	subs	r2, r3, #2
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3328      	adds	r3, #40	; 0x28
 80021fc:	4619      	mov	r1, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	f000 fd5e 	bl	8002cc8 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	08002371 	.word	0x08002371
 8002234:	0800249b 	.word	0x0800249b

08002238 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d016      	beq.n	8002280 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2204      	movs	r2, #4
 800226a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <HAL_DCMI_IRQHandler+0xf8>)
 8002274:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa98 	bl	80027b0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2202      	movs	r2, #2
 8002290:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_DCMI_IRQHandler+0xf8>)
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fa7c 	bl	80027b0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2210      	movs	r2, #16
 80022c8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f83c 	bl	8002348 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f83a 	bl	800235c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d107      	bne.n	8002310 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 021e 	bic.w	r2, r2, #30
 800230e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff f85f 	bl	80013e4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	0800249b 	.word	0x0800249b

08002334 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	2b00      	cmp	r3, #0
 8002388:	d043      	beq.n	8002412 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002396:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d118      	bne.n	80023d6 <DCMI_DMAXferCplt+0x66>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d015      	beq.n	80023d6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	00da      	lsls	r2, r3, #3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	4619      	mov	r1, r3
 80023c6:	f001 fdc7 	bl	8003f58 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
 80023d4:	e044      	b.n	8002460 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d13c      	bne.n	8002460 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4413      	add	r3, r2
 80023fe:	2201      	movs	r2, #1
 8002400:	4619      	mov	r1, r3
 8002402:	f001 fda9 	bl	8003f58 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
 8002410:	e026      	b.n	8002460 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e017      	b.n	8002460 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	0099      	lsls	r1, r3, #2
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	440a      	add	r2, r1
 8002456:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	429a      	cmp	r2, r3
 800246a:	d112      	bne.n	8002492 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d103      	bne.n	8002492 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff ff3a 	bl	8002334 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e05f      	b.n	800259a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fa34 	bl	800195c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fa31 	bl	800195c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002510:	f023 0308 	bic.w	r3, r3, #8
 8002514:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800252a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002536:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002542:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d112      	bne.n	800257a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7f1b      	ldrb	r3, [r3, #28]
 8002558:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7f5b      	ldrb	r3, [r3, #29]
 800255e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002560:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7f9b      	ldrb	r3, [r3, #30]
 8002566:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002568:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7fdb      	ldrb	r3, [r3, #31]
 8002570:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002576:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002578:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 021e 	orr.w	r2, r2, #30
 8002588:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff fc60 	bl	8001e74 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e099      	b.n	80026f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	e00f      	b.n	8002602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e2:	f7ff fc47 	bl	8001e74 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d908      	bls.n	8002602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e078      	b.n	80026f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e8      	bne.n	80025e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_DMA_Init+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4313      	orrs	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b04      	cmp	r3, #4
 8002694:	d117      	bne.n	80026c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fa91 	bl	8002bd0 <DMA_CheckFifoParam>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c2:	2301      	movs	r3, #1
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa48 	bl	8002b64 <DMA_CalcBaseAndBitshift>
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	f010803f 	.word	0xf010803f

08002700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Start_IT+0x26>
 8002722:	2302      	movs	r3, #2
 8002724:	e040      	b.n	80027a8 <HAL_DMA_Start_IT+0xa8>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d12f      	bne.n	800279a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f9da 	bl	8002b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0216 	orr.w	r2, r2, #22
 800276e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e005      	b.n	80027a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00c      	b.n	80027e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002800:	4b8e      	ldr	r3, [pc, #568]	; (8002a3c <HAL_DMA_IRQHandler+0x248>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a8e      	ldr	r2, [pc, #568]	; (8002a40 <HAL_DMA_IRQHandler+0x24c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2204      	movs	r2, #4
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2204      	movs	r2, #4
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2210      	movs	r2, #16
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d043      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03c      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2210      	movs	r2, #16
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d018      	beq.n	8002936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d024      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e01f      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e016      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0208 	bic.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2220      	movs	r2, #32
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 808f 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8087 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2220      	movs	r2, #32
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d136      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0216 	bic.w	r2, r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_DMA_IRQHandler+0x1da>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	223f      	movs	r2, #63	; 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07e      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
        }
        return;
 8002a0a:	e079      	b.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e02c      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
 8002a3a:	bf00      	nop
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d023      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e01e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10f      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0210 	bic.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d032      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2205      	movs	r2, #5
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d307      	bcc.n	8002adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f2      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x2cc>
 8002ada:	e000      	b.n	8002ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b00:	bf00      	nop
    }
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d108      	bne.n	8002b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b46:	e007      	b.n	8002b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b10      	subs	r3, #16
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x68>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d909      	bls.n	8002ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba4:	e007      	b.n	8002bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	aaaaaaab 	.word	0xaaaaaaab
 8002bcc:	08006844 	.word	0x08006844

08002bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d856      	bhi.n	8002c9e <DMA_CheckFifoParam+0xce>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x28>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c1b 	.word	0x08002c1b
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c9f 	.word	0x08002c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d046      	beq.n	8002ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e043      	b.n	8002ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c22:	d140      	bne.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e03d      	b.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	d121      	bne.n	8002c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d837      	bhi.n	8002caa <DMA_CheckFifoParam+0xda>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <DMA_CheckFifoParam+0x70>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c57 	.word	0x08002c57
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002c69 	.word	0x08002c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e030      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d025      	beq.n	8002cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c66:	e022      	b.n	8002cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c76:	e01c      	b.n	8002cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d903      	bls.n	8002c86 <DMA_CheckFifoParam+0xb6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c84:	e018      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8a:	e015      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e00b      	b.n	8002cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e00a      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e008      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e006      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e004      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d106      	bne.n	8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f001 b911 	b.w	8003f12 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f001 b8ff 	b.w	8003f12 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f001 b8f7 	b.w	8003f12 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f041 80e5 	bne.w	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d56:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f001 f910 	bl	8003f8c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d960      	bls.n	8002e3a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a8b      	ldr	r2, [pc, #556]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d057      	beq.n	8002e32 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a8a      	ldr	r2, [pc, #552]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d050      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d049      	beq.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d042      	beq.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a85      	ldr	r2, [pc, #532]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d03a      	beq.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a84      	ldr	r2, [pc, #528]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d032      	beq.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a82      	ldr	r2, [pc, #520]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02a      	beq.n	8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a81      	ldr	r2, [pc, #516]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01a      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d012      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00a      	beq.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7b      	ldr	r2, [pc, #492]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002df0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002df4:	e01e      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002df6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dfa:	e01b      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e00:	e018      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e06:	e015      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e0c:	e012      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e12:	e00f      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e18:	e00c      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e1e:	e009      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e24:	e006      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e002      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e2e:	2320      	movs	r3, #32
 8002e30:	e000      	b.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002e32:	2320      	movs	r3, #32
 8002e34:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e14f      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d960      	bls.n	8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d057      	beq.n	8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d050      	beq.n	8002efc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d049      	beq.n	8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d042      	beq.n	8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03a      	beq.n	8002eee <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d032      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02a      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d022      	beq.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01a      	beq.n	8002ed6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d012      	beq.n	8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00a      	beq.n	8002eca <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d102      	bne.n	8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002ebe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec2:	e01e      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ec4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ec8:	e01b      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ece:	e018      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ed0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ed4:	e015      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ed6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eda:	e012      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee0:	e00f      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee6:	e00c      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eec:	e009      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef2:	e006      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e004      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e002      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002efc:	2320      	movs	r3, #32
 8002efe:	e000      	b.n	8002f02 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002f00:	2320      	movs	r3, #32
 8002f02:	4a36      	ldr	r2, [pc, #216]	; (8002fdc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002f04:	6093      	str	r3, [r2, #8]
 8002f06:	e0e8      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f240 8082 	bls.w	800301a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d078      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d071      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d06a      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d063      	beq.n	8003006 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d05b      	beq.n	8003000 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d053      	beq.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d04b      	beq.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d043      	beq.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d03b      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d012      	beq.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00a      	beq.n	8002f9a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d102      	bne.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002f8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f92:	e03f      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f98:	e03c      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f9e:	e039      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fa4:	e036      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fa6:	bf00      	nop
 8002fa8:	40026458 	.word	0x40026458
 8002fac:	40026010 	.word	0x40026010
 8002fb0:	40026410 	.word	0x40026410
 8002fb4:	40026070 	.word	0x40026070
 8002fb8:	40026470 	.word	0x40026470
 8002fbc:	40026028 	.word	0x40026028
 8002fc0:	40026428 	.word	0x40026428
 8002fc4:	40026088 	.word	0x40026088
 8002fc8:	40026488 	.word	0x40026488
 8002fcc:	40026040 	.word	0x40026040
 8002fd0:	40026440 	.word	0x40026440
 8002fd4:	400260a0 	.word	0x400260a0
 8002fd8:	400264a0 	.word	0x400264a0
 8002fdc:	40026400 	.word	0x40026400
 8002fe0:	400260b8 	.word	0x400260b8
 8002fe4:	40026058 	.word	0x40026058
 8002fe8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fec:	e012      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ff2:	e00f      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ff8:	e00c      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ffe:	e009      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003004:	e006      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003006:	2320      	movs	r3, #32
 8003008:	e004      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800300a:	2320      	movs	r3, #32
 800300c:	e002      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800300e:	2320      	movs	r3, #32
 8003010:	e000      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003012:	2320      	movs	r3, #32
 8003014:	4a8c      	ldr	r2, [pc, #560]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003016:	60d3      	str	r3, [r2, #12]
 8003018:	e05f      	b.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a8b      	ldr	r2, [pc, #556]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d057      	beq.n	80030d4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a89      	ldr	r2, [pc, #548]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d050      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a88      	ldr	r2, [pc, #544]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d049      	beq.n	80030cc <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a86      	ldr	r2, [pc, #536]	; (8003258 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d042      	beq.n	80030c8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a85      	ldr	r2, [pc, #532]	; (800325c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d03a      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a83      	ldr	r2, [pc, #524]	; (8003260 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d032      	beq.n	80030bc <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a82      	ldr	r2, [pc, #520]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d02a      	beq.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d022      	beq.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7f      	ldr	r2, [pc, #508]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d01a      	beq.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7d      	ldr	r2, [pc, #500]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d012      	beq.n	80030a4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00a      	beq.n	800309e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d102      	bne.n	8003098 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8003092:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003096:	e01e      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800309c:	e01b      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800309e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a2:	e018      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a8:	e015      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ae:	e012      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b4:	e00f      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030ba:	e00c      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030c0:	e009      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030c6:	e006      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030cc:	2320      	movs	r3, #32
 80030ce:	e002      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030d0:	2320      	movs	r3, #32
 80030d2:	e000      	b.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80030d4:	2320      	movs	r3, #32
 80030d6:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80030d8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b66      	ldr	r3, [pc, #408]	; (800327c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d960      	bls.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d057      	beq.n	80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a56      	ldr	r2, [pc, #344]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d050      	beq.n	800319c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a55      	ldr	r2, [pc, #340]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d049      	beq.n	8003198 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a53      	ldr	r2, [pc, #332]	; (8003258 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d042      	beq.n	8003194 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03a      	beq.n	800318e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a50      	ldr	r2, [pc, #320]	; (8003260 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d032      	beq.n	8003188 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4f      	ldr	r2, [pc, #316]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02a      	beq.n	8003182 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4d      	ldr	r2, [pc, #308]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d022      	beq.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01a      	beq.n	8003176 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4a      	ldr	r2, [pc, #296]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d012      	beq.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a49      	ldr	r2, [pc, #292]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00a      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d102      	bne.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800315e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003162:	e01e      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003164:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003168:	e01b      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800316a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800316e:	e018      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003174:	e015      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800317a:	e012      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800317c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003180:	e00f      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003186:	e00c      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	e009      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800318e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003192:	e006      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003194:	2310      	movs	r3, #16
 8003196:	e004      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003198:	2310      	movs	r3, #16
 800319a:	e002      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800319c:	2310      	movs	r3, #16
 800319e:	e000      	b.n	80031a2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80031a0:	2310      	movs	r3, #16
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80031a4:	60d3      	str	r3, [r2, #12]
 80031a6:	e14f      	b.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80031b0:	429a      	cmp	r2, r3
 80031b2:	f240 8082 	bls.w	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d078      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d071      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d06a      	beq.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d063      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d05b      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d053      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04b      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d043      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a16      	ldr	r2, [pc, #88]	; (8003270 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d012      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00a      	beq.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a13      	ldr	r2, [pc, #76]	; (8003278 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d102      	bne.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800322e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003232:	e03f      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003234:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003238:	e03c      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800323a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323e:	e039      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003244:	e036      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003246:	bf00      	nop
 8003248:	40026000 	.word	0x40026000
 800324c:	40026010 	.word	0x40026010
 8003250:	40026410 	.word	0x40026410
 8003254:	40026070 	.word	0x40026070
 8003258:	40026470 	.word	0x40026470
 800325c:	40026028 	.word	0x40026028
 8003260:	40026428 	.word	0x40026428
 8003264:	40026088 	.word	0x40026088
 8003268:	40026488 	.word	0x40026488
 800326c:	40026040 	.word	0x40026040
 8003270:	40026440 	.word	0x40026440
 8003274:	400260a0 	.word	0x400260a0
 8003278:	400264a0 	.word	0x400264a0
 800327c:	40026458 	.word	0x40026458
 8003280:	40026400 	.word	0x40026400
 8003284:	400260b8 	.word	0x400260b8
 8003288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800328c:	e012      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800328e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003292:	e00f      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	e00c      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800329a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329e:	e009      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	e006      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80032a6:	2310      	movs	r3, #16
 80032a8:	e004      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80032aa:	2310      	movs	r3, #16
 80032ac:	e002      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80032ae:	2310      	movs	r3, #16
 80032b0:	e000      	b.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80032b2:	2310      	movs	r3, #16
 80032b4:	4a8c      	ldr	r2, [pc, #560]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80032b6:	6093      	str	r3, [r2, #8]
 80032b8:	e0c6      	b.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d960      	bls.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a89      	ldr	r2, [pc, #548]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d057      	beq.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a87      	ldr	r2, [pc, #540]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d050      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a86      	ldr	r2, [pc, #536]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d049      	beq.n	8003378 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a84      	ldr	r2, [pc, #528]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d042      	beq.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a83      	ldr	r2, [pc, #524]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d03a      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a81      	ldr	r2, [pc, #516]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d032      	beq.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02a      	beq.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a7e      	ldr	r2, [pc, #504]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d022      	beq.n	800335c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d01a      	beq.n	8003356 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a7b      	ldr	r2, [pc, #492]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d012      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00a      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d102      	bne.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800333e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003342:	e01e      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003344:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003348:	e01b      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800334a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800334e:	e018      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003354:	e015      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003356:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800335a:	e012      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	e00f      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003366:	e00c      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336c:	e009      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800336e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003372:	e006      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003374:	2310      	movs	r3, #16
 8003376:	e004      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003378:	2310      	movs	r3, #16
 800337a:	e002      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800337c:	2310      	movs	r3, #16
 800337e:	e000      	b.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003380:	2310      	movs	r3, #16
 8003382:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003384:	60d3      	str	r3, [r2, #12]
 8003386:	e05f      	b.n	8003448 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d057      	beq.n	8003442 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a57      	ldr	r2, [pc, #348]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d050      	beq.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a55      	ldr	r2, [pc, #340]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d049      	beq.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a54      	ldr	r2, [pc, #336]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d042      	beq.n	8003436 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03a      	beq.n	8003430 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a51      	ldr	r2, [pc, #324]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d032      	beq.n	800342a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02a      	beq.n	8003424 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01a      	beq.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d012      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00a      	beq.n	800340c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003404:	e01e      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800340a:	e01b      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800340c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003410:	e018      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003412:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003416:	e015      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800341c:	e012      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800341e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003422:	e00f      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003428:	e00c      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800342a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342e:	e009      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003434:	e006      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003436:	2310      	movs	r3, #16
 8003438:	e004      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800343a:	2310      	movs	r3, #16
 800343c:	e002      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800343e:	2310      	movs	r3, #16
 8003440:	e000      	b.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003442:	2310      	movs	r3, #16
 8003444:	4a36      	ldr	r2, [pc, #216]	; (8003520 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003446:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b35      	ldr	r3, [pc, #212]	; (8003524 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003450:	429a      	cmp	r2, r3
 8003452:	f240 8082 	bls.w	800355a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d078      	beq.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d071      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d06a      	beq.n	800354a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a20      	ldr	r2, [pc, #128]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d063      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d05b      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d053      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04b      	beq.n	8003534 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1a      	ldr	r2, [pc, #104]	; (800350c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d043      	beq.n	800352e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d012      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00a      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d102      	bne.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80034ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d2:	e03f      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d8:	e03c      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034de:	e039      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034e4:	e036      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034e6:	bf00      	nop
 80034e8:	40026400 	.word	0x40026400
 80034ec:	40026058 	.word	0x40026058
 80034f0:	40026010 	.word	0x40026010
 80034f4:	40026410 	.word	0x40026410
 80034f8:	40026070 	.word	0x40026070
 80034fc:	40026470 	.word	0x40026470
 8003500:	40026028 	.word	0x40026028
 8003504:	40026428 	.word	0x40026428
 8003508:	40026088 	.word	0x40026088
 800350c:	40026488 	.word	0x40026488
 8003510:	40026040 	.word	0x40026040
 8003514:	40026440 	.word	0x40026440
 8003518:	400260a0 	.word	0x400260a0
 800351c:	400264a0 	.word	0x400264a0
 8003520:	40026000 	.word	0x40026000
 8003524:	40026458 	.word	0x40026458
 8003528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800352c:	e012      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800352e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003532:	e00f      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003538:	e00c      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800353a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353e:	e009      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	e006      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003546:	2308      	movs	r3, #8
 8003548:	e004      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800354a:	2308      	movs	r3, #8
 800354c:	e002      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800354e:	2308      	movs	r3, #8
 8003550:	e000      	b.n	8003554 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003552:	2308      	movs	r3, #8
 8003554:	4a8c      	ldr	r2, [pc, #560]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003556:	60d3      	str	r3, [r2, #12]
 8003558:	e14e      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b8a      	ldr	r3, [pc, #552]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003562:	429a      	cmp	r2, r3
 8003564:	d960      	bls.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a89      	ldr	r2, [pc, #548]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d057      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a87      	ldr	r2, [pc, #540]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d050      	beq.n	800361c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a86      	ldr	r2, [pc, #536]	; (8003798 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d049      	beq.n	8003618 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a84      	ldr	r2, [pc, #528]	; (800379c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d042      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a83      	ldr	r2, [pc, #524]	; (80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d03a      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a81      	ldr	r2, [pc, #516]	; (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d032      	beq.n	8003608 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d02a      	beq.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7d      	ldr	r2, [pc, #500]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d01a      	beq.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7b      	ldr	r2, [pc, #492]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d012      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00a      	beq.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a78      	ldr	r2, [pc, #480]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d102      	bne.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80035de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035e2:	e01e      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e8:	e01b      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035ee:	e018      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035f4:	e015      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035fa:	e012      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003600:	e00f      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003606:	e00c      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360c:	e009      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800360e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003612:	e006      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003614:	2308      	movs	r3, #8
 8003616:	e004      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003618:	2308      	movs	r3, #8
 800361a:	e002      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800361c:	2308      	movs	r3, #8
 800361e:	e000      	b.n	8003622 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003620:	2308      	movs	r3, #8
 8003622:	4a59      	ldr	r2, [pc, #356]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003624:	6093      	str	r3, [r2, #8]
 8003626:	e0e7      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d960      	bls.n	80036f6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a55      	ldr	r2, [pc, #340]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d057      	beq.n	80036ee <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a54      	ldr	r2, [pc, #336]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d050      	beq.n	80036ea <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d049      	beq.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a51      	ldr	r2, [pc, #324]	; (800379c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d042      	beq.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4f      	ldr	r2, [pc, #316]	; (80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03a      	beq.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d032      	beq.n	80036d6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4c      	ldr	r2, [pc, #304]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02a      	beq.n	80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4b      	ldr	r2, [pc, #300]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a49      	ldr	r2, [pc, #292]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01a      	beq.n	80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d012      	beq.n	80036be <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a46      	ldr	r2, [pc, #280]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00a      	beq.n	80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a45      	ldr	r2, [pc, #276]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d102      	bne.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80036ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036b0:	e01e      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b6:	e01b      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036bc:	e018      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036c2:	e015      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036c8:	e012      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ce:	e00f      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d4:	e00c      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036da:	e009      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e0:	e006      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036e2:	2308      	movs	r3, #8
 80036e4:	e004      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036e6:	2308      	movs	r3, #8
 80036e8:	e002      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036ea:	2308      	movs	r3, #8
 80036ec:	e000      	b.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80036ee:	2308      	movs	r3, #8
 80036f0:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80036f2:	60d3      	str	r3, [r2, #12]
 80036f4:	e080      	b.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a25      	ldr	r2, [pc, #148]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d078      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d071      	beq.n	80037ee <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d06a      	beq.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d063      	beq.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d05b      	beq.n	80037e0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d053      	beq.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04b      	beq.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d043      	beq.n	80037ce <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d012      	beq.n	8003780 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00a      	beq.n	800377a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d102      	bne.n	8003774 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800376e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003772:	e03f      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003778:	e03c      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800377a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800377e:	e039      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003784:	e036      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003786:	bf00      	nop
 8003788:	40026400 	.word	0x40026400
 800378c:	400260b8 	.word	0x400260b8
 8003790:	40026010 	.word	0x40026010
 8003794:	40026410 	.word	0x40026410
 8003798:	40026070 	.word	0x40026070
 800379c:	40026470 	.word	0x40026470
 80037a0:	40026028 	.word	0x40026028
 80037a4:	40026428 	.word	0x40026428
 80037a8:	40026088 	.word	0x40026088
 80037ac:	40026488 	.word	0x40026488
 80037b0:	40026040 	.word	0x40026040
 80037b4:	40026440 	.word	0x40026440
 80037b8:	400260a0 	.word	0x400260a0
 80037bc:	400264a0 	.word	0x400264a0
 80037c0:	40026058 	.word	0x40026058
 80037c4:	40026000 	.word	0x40026000
 80037c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037cc:	e012      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d2:	e00f      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d8:	e00c      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037de:	e009      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e4:	e006      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037e6:	2308      	movs	r3, #8
 80037e8:	e004      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037ea:	2308      	movs	r3, #8
 80037ec:	e002      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037ee:	2308      	movs	r3, #8
 80037f0:	e000      	b.n	80037f4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80037f2:	2308      	movs	r3, #8
 80037f4:	4a8a      	ldr	r2, [pc, #552]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80037f6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b89      	ldr	r3, [pc, #548]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d960      	bls.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a87      	ldr	r2, [pc, #540]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d057      	beq.n	80038be <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a86      	ldr	r2, [pc, #536]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d050      	beq.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a84      	ldr	r2, [pc, #528]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d049      	beq.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a83      	ldr	r2, [pc, #524]	; (8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d042      	beq.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a81      	ldr	r2, [pc, #516]	; (8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03a      	beq.n	80038ac <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a80      	ldr	r2, [pc, #512]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d032      	beq.n	80038a6 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7e      	ldr	r2, [pc, #504]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02a      	beq.n	80038a0 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7d      	ldr	r2, [pc, #500]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7b      	ldr	r2, [pc, #492]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01a      	beq.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7a      	ldr	r2, [pc, #488]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d012      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a78      	ldr	r2, [pc, #480]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00a      	beq.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800387c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003880:	e01e      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003886:	e01b      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003888:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800388c:	e018      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800388e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003892:	e015      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003894:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003898:	e012      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800389a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389e:	e00f      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a4:	e00c      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038aa:	e009      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b0:	e006      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038b2:	2304      	movs	r3, #4
 80038b4:	e004      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038b6:	2304      	movs	r3, #4
 80038b8:	e002      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038ba:	2304      	movs	r3, #4
 80038bc:	e000      	b.n	80038c0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80038be:	2304      	movs	r3, #4
 80038c0:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80038c2:	60d3      	str	r3, [r2, #12]
 80038c4:	e150      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d960      	bls.n	8003994 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a54      	ldr	r2, [pc, #336]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d057      	beq.n	800398c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d050      	beq.n	8003988 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a51      	ldr	r2, [pc, #324]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d049      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a4f      	ldr	r2, [pc, #316]	; (8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d042      	beq.n	8003980 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a4e      	ldr	r2, [pc, #312]	; (8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d03a      	beq.n	800397a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d032      	beq.n	8003974 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d02a      	beq.n	800396e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a48      	ldr	r2, [pc, #288]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01a      	beq.n	8003962 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d012      	beq.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00a      	beq.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a43      	ldr	r2, [pc, #268]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d102      	bne.n	8003950 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800394a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800394e:	e01e      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003954:	e01b      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003956:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800395a:	e018      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800395c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003960:	e015      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003962:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003966:	e012      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396c:	e00f      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800396e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003972:	e00c      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003978:	e009      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800397a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397e:	e006      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003980:	2304      	movs	r3, #4
 8003982:	e004      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003984:	2304      	movs	r3, #4
 8003986:	e002      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003988:	2304      	movs	r3, #4
 800398a:	e000      	b.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800398c:	2304      	movs	r3, #4
 800398e:	4a32      	ldr	r2, [pc, #200]	; (8003a58 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003990:	6093      	str	r3, [r2, #8]
 8003992:	e0e9      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800399c:	429a      	cmp	r2, r3
 800399e:	f240 8083 	bls.w	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d079      	beq.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d072      	beq.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d06b      	beq.n	8003a98 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d064      	beq.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d05c      	beq.n	8003a8e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d054      	beq.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04c      	beq.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d044      	beq.n	8003a7c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03c      	beq.n	8003a76 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d034      	beq.n	8003a70 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d124      	bne.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003a1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a1e:	e040      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a20:	40026000 	.word	0x40026000
 8003a24:	40026458 	.word	0x40026458
 8003a28:	40026010 	.word	0x40026010
 8003a2c:	40026410 	.word	0x40026410
 8003a30:	40026070 	.word	0x40026070
 8003a34:	40026470 	.word	0x40026470
 8003a38:	40026028 	.word	0x40026028
 8003a3c:	40026428 	.word	0x40026428
 8003a40:	40026088 	.word	0x40026088
 8003a44:	40026488 	.word	0x40026488
 8003a48:	40026040 	.word	0x40026040
 8003a4c:	40026440 	.word	0x40026440
 8003a50:	400260a0 	.word	0x400260a0
 8003a54:	400264a0 	.word	0x400264a0
 8003a58:	40026400 	.word	0x40026400
 8003a5c:	400260b8 	.word	0x400260b8
 8003a60:	40026058 	.word	0x40026058
 8003a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a68:	e01b      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a6e:	e018      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a74:	e015      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a7a:	e012      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a80:	e00f      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a86:	e00c      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8c:	e009      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a92:	e006      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e004      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e002      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e000      	b.n	8003aa2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	4a8b      	ldr	r2, [pc, #556]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003aa4:	60d3      	str	r3, [r2, #12]
 8003aa6:	e05f      	b.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a89      	ldr	r2, [pc, #548]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d057      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a88      	ldr	r2, [pc, #544]	; (8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d050      	beq.n	8003b5e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a86      	ldr	r2, [pc, #536]	; (8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d049      	beq.n	8003b5a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a85      	ldr	r2, [pc, #532]	; (8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d042      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a83      	ldr	r2, [pc, #524]	; (8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a82      	ldr	r2, [pc, #520]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d032      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a80      	ldr	r2, [pc, #512]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7f      	ldr	r2, [pc, #508]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a7d      	ldr	r2, [pc, #500]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01a      	beq.n	8003b38 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7c      	ldr	r2, [pc, #496]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d012      	beq.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7a      	ldr	r2, [pc, #488]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00a      	beq.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a79      	ldr	r2, [pc, #484]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d102      	bne.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003b20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b24:	e01e      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b2a:	e01b      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b30:	e018      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b36:	e015      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b3c:	e012      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b42:	e00f      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b48:	e00c      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b4e:	e009      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b54:	e006      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e004      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e002      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e000      	b.n	8003b64 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b62:	2304      	movs	r3, #4
 8003b64:	4a5a      	ldr	r2, [pc, #360]	; (8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003b66:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d95c      	bls.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d053      	beq.n	8003c26 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a55      	ldr	r2, [pc, #340]	; (8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04c      	beq.n	8003c22 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a53      	ldr	r2, [pc, #332]	; (8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a52      	ldr	r2, [pc, #328]	; (8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d03e      	beq.n	8003c1a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d037      	beq.n	8003c16 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a4f      	ldr	r2, [pc, #316]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d030      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a4d      	ldr	r2, [pc, #308]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d029      	beq.n	8003c0e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01a      	beq.n	8003c04 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d012      	beq.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00a      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a46      	ldr	r2, [pc, #280]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d102      	bne.n	8003bf2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf0:	e01a      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bf6:	e017      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfc:	e014      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c02:	e011      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c08:	e00e      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	e00c      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	e00a      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	e008      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c16:	2340      	movs	r3, #64	; 0x40
 8003c18:	e006      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e004      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e002      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4a37      	ldr	r2, [pc, #220]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003c2a:	60d3      	str	r3, [r2, #12]
 8003c2c:	e141      	b.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d97c      	bls.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d073      	beq.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d06c      	beq.n	8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d065      	beq.n	8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d05e      	beq.n	8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d057      	beq.n	8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d050      	beq.n	8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d049      	beq.n	8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d042      	beq.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d01a      	beq.n	8003cca <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d012      	beq.n	8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00a      	beq.n	8003cbe <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d102      	bne.n	8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb6:	e03a      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cbc:	e037      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc2:	e034      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc8:	e031      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cce:	e02e      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cd0:	40026000 	.word	0x40026000
 8003cd4:	40026010 	.word	0x40026010
 8003cd8:	40026410 	.word	0x40026410
 8003cdc:	40026070 	.word	0x40026070
 8003ce0:	40026470 	.word	0x40026470
 8003ce4:	40026028 	.word	0x40026028
 8003ce8:	40026428 	.word	0x40026428
 8003cec:	40026088 	.word	0x40026088
 8003cf0:	40026488 	.word	0x40026488
 8003cf4:	40026040 	.word	0x40026040
 8003cf8:	40026440 	.word	0x40026440
 8003cfc:	400260a0 	.word	0x400260a0
 8003d00:	400264a0 	.word	0x400264a0
 8003d04:	40026458 	.word	0x40026458
 8003d08:	40026400 	.word	0x40026400
 8003d0c:	400260b8 	.word	0x400260b8
 8003d10:	2340      	movs	r3, #64	; 0x40
 8003d12:	e00c      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	e00a      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d18:	2340      	movs	r3, #64	; 0x40
 8003d1a:	e008      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d1c:	2340      	movs	r3, #64	; 0x40
 8003d1e:	e006      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e004      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e002      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4a7b      	ldr	r2, [pc, #492]	; (8003f1c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003d30:	6093      	str	r3, [r2, #8]
 8003d32:	e0be      	b.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d95c      	bls.n	8003dfa <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d053      	beq.n	8003df2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a76      	ldr	r2, [pc, #472]	; (8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d04c      	beq.n	8003dee <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a74      	ldr	r2, [pc, #464]	; (8003f2c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d045      	beq.n	8003dea <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03e      	beq.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a71      	ldr	r2, [pc, #452]	; (8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d037      	beq.n	8003de2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a70      	ldr	r2, [pc, #448]	; (8003f38 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d030      	beq.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6e      	ldr	r2, [pc, #440]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d029      	beq.n	8003dda <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6d      	ldr	r2, [pc, #436]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6b      	ldr	r2, [pc, #428]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01a      	beq.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6a      	ldr	r2, [pc, #424]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d012      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00a      	beq.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a67      	ldr	r2, [pc, #412]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d102      	bne.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dbc:	e01a      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dc2:	e017      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc8:	e014      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dce:	e011      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dd4:	e00e      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	e00c      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	e00a      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	e008      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003de2:	2340      	movs	r3, #64	; 0x40
 8003de4:	e006      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e004      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e002      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e05b      	b.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a49      	ldr	r2, [pc, #292]	; (8003f24 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d053      	beq.n	8003eac <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a47      	ldr	r2, [pc, #284]	; (8003f28 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04c      	beq.n	8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a46      	ldr	r2, [pc, #280]	; (8003f2c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d03e      	beq.n	8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a43      	ldr	r2, [pc, #268]	; (8003f34 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d037      	beq.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d030      	beq.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d029      	beq.n	8003e94 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d022      	beq.n	8003e90 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d01a      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d012      	beq.n	8003e84 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3a      	ldr	r2, [pc, #232]	; (8003f4c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00a      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d102      	bne.n	8003e78 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e76:	e01a      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e7c:	e017      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e82:	e014      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e88:	e011      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e8e:	e00e      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	e00c      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	e00a      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	e008      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e9c:	2340      	movs	r3, #64	; 0x40
 8003e9e:	e006      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e004      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e002      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4a29      	ldr	r2, [pc, #164]	; (8003f54 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003eb0:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0216 	orr.w	r2, r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0208 	orr.w	r2, r2, #8
 8003ef0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e005      	b.n	8003f10 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40026400 	.word	0x40026400
 8003f20:	40026058 	.word	0x40026058
 8003f24:	40026010 	.word	0x40026010
 8003f28:	40026410 	.word	0x40026410
 8003f2c:	40026070 	.word	0x40026070
 8003f30:	40026470 	.word	0x40026470
 8003f34:	40026028 	.word	0x40026028
 8003f38:	40026428 	.word	0x40026428
 8003f3c:	40026088 	.word	0x40026088
 8003f40:	40026488 	.word	0x40026488
 8003f44:	40026040 	.word	0x40026040
 8003f48:	40026440 	.word	0x40026440
 8003f4c:	400260a0 	.word	0x400260a0
 8003f50:	400264a0 	.word	0x400264a0
 8003f54:	40026000 	.word	0x40026000

08003f58 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	e003      	b.n	8003f7e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d108      	bne.n	8003fbc <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fba:	e007      	b.n	8003fcc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e16b      	b.n	80042cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	f040 815a 	bne.w	80042c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d005      	beq.n	800402a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004026:	2b02      	cmp	r3, #2
 8004028:	d130      	bne.n	800408c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 0201 	and.w	r2, r3, #1
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b03      	cmp	r3, #3
 8004096:	d017      	beq.n	80040c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d123      	bne.n	800411c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	08da      	lsrs	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3208      	adds	r2, #8
 80040dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	220f      	movs	r2, #15
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	08da      	lsrs	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3208      	adds	r2, #8
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b4 	beq.w	80042c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	4a5f      	ldr	r2, [pc, #380]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800417a:	4a5b      	ldr	r2, [pc, #364]	; (80042e8 <HAL_GPIO_Init+0x310>)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_GPIO_Init+0x314>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <HAL_GPIO_Init+0x226>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a51      	ldr	r2, [pc, #324]	; (80042f0 <HAL_GPIO_Init+0x318>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d025      	beq.n	80041fa <HAL_GPIO_Init+0x222>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a50      	ldr	r2, [pc, #320]	; (80042f4 <HAL_GPIO_Init+0x31c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <HAL_GPIO_Init+0x21e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4f      	ldr	r2, [pc, #316]	; (80042f8 <HAL_GPIO_Init+0x320>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d019      	beq.n	80041f2 <HAL_GPIO_Init+0x21a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4e      	ldr	r2, [pc, #312]	; (80042fc <HAL_GPIO_Init+0x324>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_GPIO_Init+0x216>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4d      	ldr	r2, [pc, #308]	; (8004300 <HAL_GPIO_Init+0x328>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_GPIO_Init+0x212>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4c      	ldr	r2, [pc, #304]	; (8004304 <HAL_GPIO_Init+0x32c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <HAL_GPIO_Init+0x20e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_GPIO_Init+0x330>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_GPIO_Init+0x20a>
 80041de:	2307      	movs	r3, #7
 80041e0:	e00e      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041e2:	2308      	movs	r3, #8
 80041e4:	e00c      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e00a      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e008      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e004      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x228>
 80041fe:	2300      	movs	r3, #0
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f002 0203 	and.w	r2, r2, #3
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4093      	lsls	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004210:	4935      	ldr	r1, [pc, #212]	; (80042e8 <HAL_GPIO_Init+0x310>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_GPIO_Init+0x334>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a32      	ldr	r2, [pc, #200]	; (800430c <HAL_GPIO_Init+0x334>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_GPIO_Init+0x334>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <HAL_GPIO_Init+0x334>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_GPIO_Init+0x334>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_GPIO_Init+0x334>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_GPIO_Init+0x334>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <HAL_GPIO_Init+0x334>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f ae90 	bls.w	8003ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40021400 	.word	0x40021400
 8004304:	40021800 	.word	0x40021800
 8004308:	40021c00 	.word	0x40021c00
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800432c:	e003      	b.n	8004336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e12b      	b.n	80045ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fbdc 	bl	8001b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043a8:	f001 fc9e 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 80043ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4a81      	ldr	r2, [pc, #516]	; (80045b8 <HAL_I2C_Init+0x274>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d807      	bhi.n	80043c8 <HAL_I2C_Init+0x84>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a80      	ldr	r2, [pc, #512]	; (80045bc <HAL_I2C_Init+0x278>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	bf94      	ite	ls
 80043c0:	2301      	movls	r3, #1
 80043c2:	2300      	movhi	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e006      	b.n	80043d6 <HAL_I2C_Init+0x92>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a7d      	ldr	r2, [pc, #500]	; (80045c0 <HAL_I2C_Init+0x27c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	bf94      	ite	ls
 80043d0:	2301      	movls	r3, #1
 80043d2:	2300      	movhi	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0e7      	b.n	80045ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a78      	ldr	r2, [pc, #480]	; (80045c4 <HAL_I2C_Init+0x280>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	0c9b      	lsrs	r3, r3, #18
 80043e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a6a      	ldr	r2, [pc, #424]	; (80045b8 <HAL_I2C_Init+0x274>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d802      	bhi.n	8004418 <HAL_I2C_Init+0xd4>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3301      	adds	r3, #1
 8004416:	e009      	b.n	800442c <HAL_I2C_Init+0xe8>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	4a69      	ldr	r2, [pc, #420]	; (80045c8 <HAL_I2C_Init+0x284>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	3301      	adds	r3, #1
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800443e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	495c      	ldr	r1, [pc, #368]	; (80045b8 <HAL_I2C_Init+0x274>)
 8004448:	428b      	cmp	r3, r1
 800444a:	d819      	bhi.n	8004480 <HAL_I2C_Init+0x13c>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1e59      	subs	r1, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fbb1 f3f3 	udiv	r3, r1, r3
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004460:	400b      	ands	r3, r1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_I2C_Init+0x138>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e59      	subs	r1, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fbb1 f3f3 	udiv	r3, r1, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	e051      	b.n	8004520 <HAL_I2C_Init+0x1dc>
 800447c:	2304      	movs	r3, #4
 800447e:	e04f      	b.n	8004520 <HAL_I2C_Init+0x1dc>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d111      	bne.n	80044ac <HAL_I2C_Init+0x168>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	440b      	add	r3, r1
 8004496:	fbb0 f3f3 	udiv	r3, r0, r3
 800449a:	3301      	adds	r3, #1
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e012      	b.n	80044d2 <HAL_I2C_Init+0x18e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1e58      	subs	r0, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	0099      	lsls	r1, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Init+0x196>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e022      	b.n	8004520 <HAL_I2C_Init+0x1dc>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10e      	bne.n	8004500 <HAL_I2C_Init+0x1bc>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1e58      	subs	r0, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	440b      	add	r3, r1
 80044f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fe:	e00f      	b.n	8004520 <HAL_I2C_Init+0x1dc>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1e58      	subs	r0, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	0099      	lsls	r1, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	fbb0 f3f3 	udiv	r3, r0, r3
 8004516:	3301      	adds	r3, #1
 8004518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	6809      	ldr	r1, [r1, #0]
 8004524:	4313      	orrs	r3, r2
 8004526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800454e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6911      	ldr	r1, [r2, #16]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68d2      	ldr	r2, [r2, #12]
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	430b      	orrs	r3, r1
 8004562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	000186a0 	.word	0x000186a0
 80045bc:	001e847f 	.word	0x001e847f
 80045c0:	003d08ff 	.word	0x003d08ff
 80045c4:	431bde83 	.word	0x431bde83
 80045c8:	10624dd3 	.word	0x10624dd3

080045cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	461a      	mov	r2, r3
 80045d8:	460b      	mov	r3, r1
 80045da:	817b      	strh	r3, [r7, #10]
 80045dc:	4613      	mov	r3, r2
 80045de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7fd fc48 	bl	8001e74 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	f040 80e0 	bne.w	80047b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2319      	movs	r3, #25
 80045fa:	2201      	movs	r2, #1
 80045fc:	4970      	ldr	r1, [pc, #448]	; (80047c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fc64 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
 800460c:	e0d3      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_I2C_Master_Transmit+0x50>
 8004618:	2302      	movs	r3, #2
 800461a:	e0cc      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d007      	beq.n	8004642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2221      	movs	r2, #33	; 0x21
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2210      	movs	r2, #16
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	893a      	ldrh	r2, [r7, #8]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a50      	ldr	r2, [pc, #320]	; (80047c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004684:	8979      	ldrh	r1, [r7, #10]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 face 	bl	8004c2c <I2C_MasterRequestWrite>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e08d      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046b0:	e066      	b.n	8004780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	6a39      	ldr	r1, [r7, #32]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fd22 	bl	8005100 <I2C_WaitOnTXEFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d107      	bne.n	80046da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06b      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_I2C_Master_Transmit+0x188>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	6a39      	ldr	r1, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fd19 	bl	8005190 <I2C_WaitOnBTFFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b04      	cmp	r3, #4
 800476a:	d107      	bne.n	800477c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e01a      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d194      	bne.n	80046b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	00100002 	.word	0x00100002
 80047c4:	ffff0000 	.word	0xffff0000

080047c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	461a      	mov	r2, r3
 80047d4:	460b      	mov	r3, r1
 80047d6:	817b      	strh	r3, [r7, #10]
 80047d8:	4613      	mov	r3, r2
 80047da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7fd fb4a 	bl	8001e74 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 8217 	bne.w	8004c1e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2319      	movs	r3, #25
 80047f6:	2201      	movs	r2, #1
 80047f8:	497c      	ldr	r1, [pc, #496]	; (80049ec <HAL_I2C_Master_Receive+0x224>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fb66 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
 8004808:	e20a      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_I2C_Master_Receive+0x50>
 8004814:	2302      	movs	r3, #2
 8004816:	e203      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d007      	beq.n	800483e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2222      	movs	r2, #34	; 0x22
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2210      	movs	r2, #16
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	893a      	ldrh	r2, [r7, #8]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a5c      	ldr	r2, [pc, #368]	; (80049f0 <HAL_I2C_Master_Receive+0x228>)
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004880:	8979      	ldrh	r1, [r7, #10]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa52 	bl	8004d30 <I2C_MasterRequestRead>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e1c4      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d113      	bne.n	80048c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e198      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d11b      	bne.n	8004906 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e178      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	2b02      	cmp	r3, #2
 800490c:	d11b      	bne.n	8004946 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	e158      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800496c:	e144      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	2b03      	cmp	r3, #3
 8004974:	f200 80f1 	bhi.w	8004b5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	2b01      	cmp	r3, #1
 800497e:	d123      	bne.n	80049c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fc4b 	bl	8005220 <I2C_WaitOnRXNEFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e145      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c6:	e117      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d14e      	bne.n	8004a6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	2200      	movs	r2, #0
 80049d8:	4906      	ldr	r1, [pc, #24]	; (80049f4 <HAL_I2C_Master_Receive+0x22c>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fa76 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e11a      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
 80049ea:	bf00      	nop
 80049ec:	00100002 	.word	0x00100002
 80049f0:	ffff0000 	.word	0xffff0000
 80049f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a6c:	e0c4      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	2200      	movs	r2, #0
 8004a76:	496c      	ldr	r1, [pc, #432]	; (8004c28 <HAL_I2C_Master_Receive+0x460>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa27 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0cb      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4955      	ldr	r1, [pc, #340]	; (8004c28 <HAL_I2C_Master_Receive+0x460>)
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f9f9 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e09d      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b58:	e04e      	b.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fb5e 	bl	8005220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e058      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d124      	bne.n	8004bf8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d107      	bne.n	8004bc6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f47f aeb6 	bne.w	800496e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	00010004 	.word	0x00010004

08004c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d006      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d003      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c54:	d108      	bne.n	8004c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e00b      	b.n	8004c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b12      	cmp	r3, #18
 8004c6e:	d107      	bne.n	8004c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f91d 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d103      	bne.n	8004cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e035      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbc:	d108      	bne.n	8004cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ccc:	611a      	str	r2, [r3, #16]
 8004cce:	e01b      	b.n	8004d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	11db      	asrs	r3, r3, #7
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0306 	and.w	r3, r3, #6
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f063 030f 	orn	r3, r3, #15
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	490e      	ldr	r1, [pc, #56]	; (8004d28 <I2C_MasterRequestWrite+0xfc>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f966 	bl	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e010      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4907      	ldr	r1, [pc, #28]	; (8004d2c <I2C_MasterRequestWrite+0x100>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f956 	bl	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00010008 	.word	0x00010008
 8004d2c:	00010002 	.word	0x00010002

08004d30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d006      	beq.n	8004d6a <I2C_MasterRequestRead+0x3a>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d003      	beq.n	8004d6a <I2C_MasterRequestRead+0x3a>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d68:	d108      	bne.n	8004d7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e00b      	b.n	8004d94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	2b11      	cmp	r3, #17
 8004d82:	d107      	bne.n	8004d94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f893 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dba:	d103      	bne.n	8004dc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e079      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd0:	d108      	bne.n	8004de4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]
 8004de2:	e05f      	b.n	8004ea4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	11db      	asrs	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0306 	and.w	r3, r3, #6
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f063 030f 	orn	r3, r3, #15
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4930      	ldr	r1, [pc, #192]	; (8004ec4 <I2C_MasterRequestRead+0x194>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f8dc 	bl	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e054      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e12:	897b      	ldrh	r3, [r7, #10]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4929      	ldr	r1, [pc, #164]	; (8004ec8 <I2C_MasterRequestRead+0x198>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8cc 	bl	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e044      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f831 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	d103      	bne.n	8004e88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e017      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	11db      	asrs	r3, r3, #7
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0306 	and.w	r3, r3, #6
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f063 030e 	orn	r3, r3, #14
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <I2C_MasterRequestRead+0x198>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f888 	bl	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	00010008 	.word	0x00010008
 8004ec8:	00010002 	.word	0x00010002

08004ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	e048      	b.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee4:	d044      	beq.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fc ffc5 	bl	8001e74 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d139      	bne.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10d      	bne.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	e00c      	b.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d116      	bne.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e023      	b.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d10d      	bne.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	e00c      	b.n	8004fb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d093      	beq.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fce:	e071      	b.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d123      	bne.n	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	f043 0204 	orr.w	r2, r3, #4
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e067      	b.n	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502e:	d041      	beq.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005030:	f7fc ff20 	bl	8001e74 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d302      	bcc.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d136      	bne.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10c      	bne.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e00b      	b.n	8005082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	43da      	mvns	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4013      	ands	r3, r2
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e021      	b.n	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d10c      	bne.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	43da      	mvns	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e00b      	b.n	80050f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f af6d 	bne.w	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800510c:	e034      	b.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f8e3 	bl	80052da <I2C_IsAcknowledgeFailed>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e034      	b.n	8005188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005124:	d028      	beq.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fc fea5 	bl	8001e74 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11d      	bne.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d016      	beq.n	8005178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e007      	b.n	8005188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d1c3      	bne.n	800510e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800519c:	e034      	b.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f89b 	bl	80052da <I2C_IsAcknowledgeFailed>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e034      	b.n	8005218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b4:	d028      	beq.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7fc fe5d 	bl	8001e74 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11d      	bne.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d016      	beq.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e007      	b.n	8005218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b04      	cmp	r3, #4
 8005214:	d1c3      	bne.n	800519e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522c:	e049      	b.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d119      	bne.n	8005270 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0210 	mvn.w	r2, #16
 8005244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e030      	b.n	80052d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fc fe00 	bl	8001e74 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d016      	beq.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e007      	b.n	80052d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d1ae      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d11b      	bne.n	800532a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e267      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d075      	beq.n	8005442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005356:	4b88      	ldr	r3, [pc, #544]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d00c      	beq.n	800537c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005362:	4b85      	ldr	r3, [pc, #532]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800536a:	2b08      	cmp	r3, #8
 800536c:	d112      	bne.n	8005394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536e:	4b82      	ldr	r3, [pc, #520]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537a:	d10b      	bne.n	8005394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537c:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05b      	beq.n	8005440 <HAL_RCC_OscConfig+0x108>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d157      	bne.n	8005440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e242      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d106      	bne.n	80053ac <HAL_RCC_OscConfig+0x74>
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a75      	ldr	r2, [pc, #468]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e01d      	b.n	80053e8 <HAL_RCC_OscConfig+0xb0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x98>
 80053b6:	4b70      	ldr	r3, [pc, #448]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6f      	ldr	r2, [pc, #444]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b6d      	ldr	r3, [pc, #436]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6c      	ldr	r2, [pc, #432]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0xb0>
 80053d0:	4b69      	ldr	r3, [pc, #420]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a68      	ldr	r2, [pc, #416]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b66      	ldr	r3, [pc, #408]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a65      	ldr	r2, [pc, #404]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc fd40 	bl	8001e74 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fc fd3c 	bl	8001e74 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	; 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e207      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xc0>
 8005416:	e014      	b.n	8005442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fc fd2c 	bl	8001e74 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005420:	f7fc fd28 	bl	8001e74 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e1f3      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	4b51      	ldr	r3, [pc, #324]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0xe8>
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d063      	beq.n	8005516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545a:	4b47      	ldr	r3, [pc, #284]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b44      	ldr	r3, [pc, #272]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCC_OscConfig+0x152>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1c7      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b3b      	ldr	r3, [pc, #236]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4937      	ldr	r1, [pc, #220]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	e03a      	b.n	8005516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a8:	4b34      	ldr	r3, [pc, #208]	; (800557c <HAL_RCC_OscConfig+0x244>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fce1 	bl	8001e74 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b6:	f7fc fcdd 	bl	8001e74 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e1a8      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d4:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4925      	ldr	r1, [pc, #148]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCC_OscConfig+0x244>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fc fcc0 	bl	8001e74 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fc fcbc 	bl	8001e74 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e187      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d036      	beq.n	8005590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_RCC_OscConfig+0x248>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc fca0 	bl	8001e74 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005538:	f7fc fc9c 	bl	8001e74 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e167      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCC_OscConfig+0x240>)
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x200>
 8005556:	e01b      	b.n	8005590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x248>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555e:	f7fc fc89 	bl	8001e74 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005564:	e00e      	b.n	8005584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005566:	f7fc fc85 	bl	8001e74 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d907      	bls.n	8005584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e150      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
 8005578:	40023800 	.word	0x40023800
 800557c:	42470000 	.word	0x42470000
 8005580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005584:	4b88      	ldr	r3, [pc, #544]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8097 	beq.w	80056cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a2:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10f      	bne.n	80055ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	4b7d      	ldr	r3, [pc, #500]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	4a7c      	ldr	r2, [pc, #496]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055bc:	6413      	str	r3, [r2, #64]	; 0x40
 80055be:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ce:	4b77      	ldr	r3, [pc, #476]	; (80057ac <HAL_RCC_OscConfig+0x474>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d118      	bne.n	800560c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055da:	4b74      	ldr	r3, [pc, #464]	; (80057ac <HAL_RCC_OscConfig+0x474>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a73      	ldr	r2, [pc, #460]	; (80057ac <HAL_RCC_OscConfig+0x474>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e6:	f7fc fc45 	bl	8001e74 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ee:	f7fc fc41 	bl	8001e74 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e10c      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b6a      	ldr	r3, [pc, #424]	; (80057ac <HAL_RCC_OscConfig+0x474>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <HAL_RCC_OscConfig+0x2ea>
 8005614:	4b64      	ldr	r3, [pc, #400]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a63      	ldr	r2, [pc, #396]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	e01c      	b.n	800565c <HAL_RCC_OscConfig+0x324>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x30c>
 800562a:	4b5f      	ldr	r3, [pc, #380]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a5e      	ldr	r2, [pc, #376]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a5b      	ldr	r2, [pc, #364]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0x324>
 8005644:	4b58      	ldr	r3, [pc, #352]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a57      	ldr	r2, [pc, #348]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	4b55      	ldr	r3, [pc, #340]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a54      	ldr	r2, [pc, #336]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc fc06 	bl	8001e74 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	e00a      	b.n	8005682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fc fc02 	bl	8001e74 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0cb      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ee      	beq.n	800566c <HAL_RCC_OscConfig+0x334>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005690:	f7fc fbf0 	bl	8001e74 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fc fbec 	bl	8001e74 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0b5      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ae:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80a1 	beq.w	8005818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056d6:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d05c      	beq.n	800579c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d141      	bne.n	800576e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCC_OscConfig+0x478>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fc fbc0 	bl	8001e74 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fc fbbc 	bl	8001e74 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e087      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	3b01      	subs	r3, #1
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	491b      	ldr	r1, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_RCC_OscConfig+0x478>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fc fb95 	bl	8001e74 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800574e:	f7fc fb91 	bl	8001e74 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e05c      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x416>
 800576c:	e054      	b.n	8005818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <HAL_RCC_OscConfig+0x478>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fc fb7e 	bl	8001e74 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fc fb7a 	bl	8001e74 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e045      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x444>
 800579a:	e03d      	b.n	8005818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e038      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
 80057a8:	40023800 	.word	0x40023800
 80057ac:	40007000 	.word	0x40007000
 80057b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x4ec>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d028      	beq.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d121      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d11a      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d111      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	3b01      	subs	r3, #1
 80057fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023800 	.word	0x40023800

08005828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0cc      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800583c:	4b68      	ldr	r3, [pc, #416]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d90c      	bls.n	8005864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b65      	ldr	r3, [pc, #404]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b63      	ldr	r3, [pc, #396]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d001      	beq.n	8005864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0b8      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a58      	ldr	r2, [pc, #352]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005894:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a52      	ldr	r2, [pc, #328]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800589e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	494d      	ldr	r1, [pc, #308]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d044      	beq.n	8005948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d119      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e07f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d003      	beq.n	80058e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e06f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f6:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e067      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4934      	ldr	r1, [pc, #208]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005918:	f7fc faac 	bl	8001e74 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fc faa8 	bl	8001e74 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e04f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d20c      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e032      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4916      	ldr	r1, [pc, #88]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	490e      	ldr	r1, [pc, #56]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ae:	f000 f889 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	490a      	ldr	r1, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x1c0>)
 80059c0:	5ccb      	ldrb	r3, [r1, r3]
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <HAL_RCC_ClockConfig+0x1c4>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_ClockConfig+0x1c8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc fa0c 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40023c00 	.word	0x40023c00
 80059e4:	40023800 	.word	0x40023800
 80059e8:	0800682c 	.word	0x0800682c
 80059ec:	20000014 	.word	0x20000014
 80059f0:	20000018 	.word	0x20000018

080059f4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d129      	bne.n	8005a5a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	4b2b      	ldr	r3, [pc, #172]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	6313      	str	r3, [r2, #48]	; 0x30
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005a38:	f107 031c 	add.w	r3, r7, #28
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	481f      	ldr	r0, [pc, #124]	; (8005abc <HAL_RCC_MCOConfig+0xc8>)
 8005a40:	f7fe faca 	bl	8003fd8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	4919      	ldr	r1, [pc, #100]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005a58:	e029      	b.n	8005aae <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a80:	2303      	movs	r3, #3
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a8c:	f107 031c 	add.w	r3, r7, #28
 8005a90:	4619      	mov	r1, r3
 8005a92:	480b      	ldr	r0, [pc, #44]	; (8005ac0 <HAL_RCC_MCOConfig+0xcc>)
 8005a94:	f7fe faa0 	bl	8003fd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005a98:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	00d9      	lsls	r1, r3, #3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	4903      	ldr	r1, [pc, #12]	; (8005ab8 <HAL_RCC_MCOConfig+0xc4>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
}
 8005aae:	bf00      	nop
 8005ab0:	3730      	adds	r7, #48	; 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40020000 	.word	0x40020000
 8005ac0:	40020800 	.word	0x40020800

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b094      	sub	sp, #80	; 0x50
 8005aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005adc:	4b79      	ldr	r3, [pc, #484]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d00d      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	f200 80e1 	bhi.w	8005cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x34>
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d003      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x3a>
 8005af6:	e0db      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af8:	4b73      	ldr	r3, [pc, #460]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005afc:	e0db      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005afe:	4b73      	ldr	r3, [pc, #460]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x208>)
 8005b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b02:	e0d8      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b04:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1a:	4b6a      	ldr	r3, [pc, #424]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	2200      	movs	r2, #0
 8005b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2e:	2300      	movs	r3, #0
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
 8005b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	f04f 0000 	mov.w	r0, #0
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	0159      	lsls	r1, r3, #5
 8005b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b48:	0150      	lsls	r0, r2, #5
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4621      	mov	r1, r4
 8005b50:	1a51      	subs	r1, r2, r1
 8005b52:	6139      	str	r1, [r7, #16]
 8005b54:	4629      	mov	r1, r5
 8005b56:	eb63 0301 	sbc.w	r3, r3, r1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b68:	4659      	mov	r1, fp
 8005b6a:	018b      	lsls	r3, r1, #6
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b72:	4651      	mov	r1, sl
 8005b74:	018a      	lsls	r2, r1, #6
 8005b76:	4651      	mov	r1, sl
 8005b78:	ebb2 0801 	subs.w	r8, r2, r1
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b96:	4690      	mov	r8, r2
 8005b98:	4699      	mov	r9, r3
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	eb18 0303 	adds.w	r3, r8, r3
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	eb49 0303 	adc.w	r3, r9, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	024b      	lsls	r3, r1, #9
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	024a      	lsls	r2, r1, #9
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	2200      	movs	r2, #0
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bd4:	f7fa faf8 	bl	80001c8 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be0:	e058      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	2200      	movs	r2, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	4611      	mov	r1, r2
 8005bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	f04f 0000 	mov.w	r0, #0
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	0159      	lsls	r1, r3, #5
 8005c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c0e:	0150      	lsls	r0, r2, #5
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4641      	mov	r1, r8
 8005c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c34:	ebb2 040a 	subs.w	r4, r2, sl
 8005c38:	eb63 050b 	sbc.w	r5, r3, fp
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	00eb      	lsls	r3, r5, #3
 8005c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c4a:	00e2      	lsls	r2, r4, #3
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	461d      	mov	r5, r3
 8005c50:	4643      	mov	r3, r8
 8005c52:	18e3      	adds	r3, r4, r3
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	464b      	mov	r3, r9
 8005c58:	eb45 0303 	adc.w	r3, r5, r3
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	028b      	lsls	r3, r1, #10
 8005c6e:	4621      	mov	r1, r4
 8005c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c74:	4621      	mov	r1, r4
 8005c76:	028a      	lsls	r2, r1, #10
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7e:	2200      	movs	r2, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	61fa      	str	r2, [r7, #28]
 8005c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c88:	f7fa fa9e 	bl	80001c8 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4613      	mov	r3, r2
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cae:	e002      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3750      	adds	r7, #80	; 0x50
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	00f42400 	.word	0x00f42400
 8005ccc:	007a1200 	.word	0x007a1200

08005cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd4:	4b03      	ldr	r3, [pc, #12]	; (8005ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000014 	.word	0x20000014

08005ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cec:	f7ff fff0 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	0a9b      	lsrs	r3, r3, #10
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	4903      	ldr	r1, [pc, #12]	; (8005d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	0800683c 	.word	0x0800683c

08005d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d14:	f7ff ffdc 	bl	8005cd0 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	0b5b      	lsrs	r3, r3, #13
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40023800 	.word	0x40023800
 8005d34:	0800683c 	.word	0x0800683c

08005d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e042      	b.n	8005dd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fb ff2a 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	; 0x24
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f973 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d175      	bne.n	8005ee4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_UART_Transmit+0x2c>
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e06e      	b.n	8005ee6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2221      	movs	r2, #33	; 0x21
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e16:	f7fc f82d 	bl	8001e74 <HAL_GetTick>
 8005e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e30:	d108      	bne.n	8005e44 <HAL_UART_Transmit+0x6c>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	e003      	b.n	8005e4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e4c:	e02e      	b.n	8005eac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f848 	bl	8005eee <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e03a      	b.n	8005ee6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	3302      	adds	r3, #2
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e007      	b.n	8005e9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1cb      	bne.n	8005e4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2140      	movs	r1, #64	; 0x40
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f814 	bl	8005eee <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e006      	b.n	8005ee6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efe:	e03b      	b.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f06:	d037      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f08:	f7fb ffb4 	bl	8001e74 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e03a      	b.n	8005f98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d023      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b80      	cmp	r3, #128	; 0x80
 8005f34:	d020      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d01d      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d116      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f81d 	bl	8005fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e00f      	b.n	8005f98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d0b4      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b095      	sub	sp, #84	; 0x54
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fc8:	643a      	str	r2, [r7, #64]	; 0x40
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e5      	bne.n	8005fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	d119      	bne.n	800604c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	60bb      	str	r3, [r7, #8]
   return(result);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0310 	bic.w	r3, r3, #16
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006038:	61ba      	str	r2, [r7, #24]
 800603a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	613b      	str	r3, [r7, #16]
   return(result);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800605a:	bf00      	nop
 800605c:	3754      	adds	r7, #84	; 0x54
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c0      	sub	sp, #256	; 0x100
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	ea40 0301 	orr.w	r3, r0, r1
 8006090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	ea40 0301 	orr.w	r3, r0, r1
 80060ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	; (8006334 <UART_SetConfig+0x2cc>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <UART_SetConfig+0xa0>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8d      	ldr	r3, [pc, #564]	; (8006338 <UART_SetConfig+0x2d0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7ff fe02 	bl	8005d10 <HAL_RCC_GetPCLK2Freq>
 800610c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006110:	e003      	b.n	800611a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006112:	f7ff fde9 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8006116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006124:	f040 810c 	bne.w	8006340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	1891      	adds	r1, r2, r2
 8006140:	65b9      	str	r1, [r7, #88]	; 0x58
 8006142:	415b      	adcs	r3, r3
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800614a:	4621      	mov	r1, r4
 800614c:	eb12 0801 	adds.w	r8, r2, r1
 8006150:	4629      	mov	r1, r5
 8006152:	eb43 0901 	adc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006178:	462b      	mov	r3, r5
 800617a:	eb49 0303 	adc.w	r3, r9, r3
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006196:	460b      	mov	r3, r1
 8006198:	18db      	adds	r3, r3, r3
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
 800619c:	4613      	mov	r3, r2
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	657b      	str	r3, [r7, #84]	; 0x54
 80061a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061ac:	f7fa f80c 	bl	80001c8 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b61      	ldr	r3, [pc, #388]	; (800633c <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d8:	415b      	adcs	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e0:	4641      	mov	r1, r8
 80061e2:	eb12 0a01 	adds.w	sl, r2, r1
 80061e6:	4649      	mov	r1, r9
 80061e8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	4692      	mov	sl, r2
 8006202:	469b      	mov	fp, r3
 8006204:	4643      	mov	r3, r8
 8006206:	eb1a 0303 	adds.w	r3, sl, r3
 800620a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800620e:	464b      	mov	r3, r9
 8006210:	eb4b 0303 	adc.w	r3, fp, r3
 8006214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	643b      	str	r3, [r7, #64]	; 0x40
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
 800623a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800623e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006242:	f7f9 ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <UART_SetConfig+0x2d4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	; 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <UART_SetConfig+0x2d4>)
 8006264:	fba3 2302 	umull	r2, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006270:	441c      	add	r4, r3
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800627c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	; 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6339      	str	r1, [r7, #48]	; 0x30
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062fe:	f7f9 ff63 	bl	80001c8 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <UART_SetConfig+0x2d4>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <UART_SetConfig+0x2d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4422      	add	r2, r4
 800632e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006330:	e106      	b.n	8006540 <UART_SetConfig+0x4d8>
 8006332:	bf00      	nop
 8006334:	40011000 	.word	0x40011000
 8006338:	40011400 	.word	0x40011400
 800633c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800634e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	1891      	adds	r1, r2, r2
 8006358:	6239      	str	r1, [r7, #32]
 800635a:	415b      	adcs	r3, r3
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006362:	4641      	mov	r1, r8
 8006364:	1854      	adds	r4, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0501 	adc.w	r5, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006388:	464b      	mov	r3, r9
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ae:	4629      	mov	r1, r5
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b8:	4621      	mov	r1, r4
 80063ba:	008a      	lsls	r2, r1, #2
 80063bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c0:	f7f9 ff02 	bl	80001c8 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b60      	ldr	r3, [pc, #384]	; (800654c <UART_SetConfig+0x4e4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006428:	464b      	mov	r3, r9
 800642a:	460a      	mov	r2, r1
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	67bb      	str	r3, [r7, #120]	; 0x78
 800643e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800645e:	f7f9 feb3 	bl	80001c8 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <UART_SetConfig+0x4e4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	; 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	3332      	adds	r3, #50	; 0x32
 800647c:	4a33      	ldr	r2, [pc, #204]	; (800654c <UART_SetConfig+0x4e4>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006488:	441c      	add	r4, r3
 800648a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648e:	2200      	movs	r2, #0
 8006490:	673b      	str	r3, [r7, #112]	; 0x70
 8006492:	677a      	str	r2, [r7, #116]	; 0x74
 8006494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064da:	464b      	mov	r3, r9
 80064dc:	460a      	mov	r2, r1
 80064de:	eb42 0303 	adc.w	r3, r2, r3
 80064e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	663b      	str	r3, [r7, #96]	; 0x60
 80064ee:	667a      	str	r2, [r7, #100]	; 0x64
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800650e:	f7f9 fe5b 	bl	80001c8 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x4e4>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	; 0x32
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <UART_SetConfig+0x4e4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4422      	add	r2, r4
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4c08      	ldr	r4, [pc, #32]	; (8006574 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8006554:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8006558:	4628      	mov	r0, r5
 800655a:	60e5      	str	r5, [r4, #12]
 800655c:	f000 f80c 	bl	8006578 <malloc>
 8006560:	60a0      	str	r0, [r4, #8]
 8006562:	b910      	cbnz	r0, 800656a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8006564:	60e0      	str	r0, [r4, #12]
 8006566:	6060      	str	r0, [r4, #4]
 8006568:	bd38      	pop	{r3, r4, r5, pc}
 800656a:	2300      	movs	r3, #0
 800656c:	6060      	str	r0, [r4, #4]
 800656e:	6005      	str	r5, [r0, #0]
 8006570:	6043      	str	r3, [r0, #4]
 8006572:	e7f9      	b.n	8006568 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8006574:	200001e8 	.word	0x200001e8

08006578 <malloc>:
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <malloc+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f000 b823 	b.w	80065c8 <_malloc_r>
 8006582:	bf00      	nop
 8006584:	2000006c 	.word	0x2000006c

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0e      	ldr	r6, [pc, #56]	; (80065c4 <sbrk_aligned+0x3c>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f8ac 	bl	80066f0 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f8a7 	bl	80066f0 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <sbrk_aligned+0x34>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d007      	beq.n	80065c0 <sbrk_aligned+0x38>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f89c 	bl	80066f0 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d101      	bne.n	80065c0 <sbrk_aligned+0x38>
 80065bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	200001fc 	.word	0x200001fc

080065c8 <_malloc_r>:
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	1ccd      	adds	r5, r1, #3
 80065ce:	f025 0503 	bic.w	r5, r5, #3
 80065d2:	3508      	adds	r5, #8
 80065d4:	2d0c      	cmp	r5, #12
 80065d6:	bf38      	it	cc
 80065d8:	250c      	movcc	r5, #12
 80065da:	2d00      	cmp	r5, #0
 80065dc:	4607      	mov	r7, r0
 80065de:	db01      	blt.n	80065e4 <_malloc_r+0x1c>
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d905      	bls.n	80065f0 <_malloc_r+0x28>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	2600      	movs	r6, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066c4 <_malloc_r+0xfc>
 80065f4:	f000 f868 	bl	80066c8 <__malloc_lock>
 80065f8:	f8d8 3000 	ldr.w	r3, [r8]
 80065fc:	461c      	mov	r4, r3
 80065fe:	bb5c      	cbnz	r4, 8006658 <_malloc_r+0x90>
 8006600:	4629      	mov	r1, r5
 8006602:	4638      	mov	r0, r7
 8006604:	f7ff ffc0 	bl	8006588 <sbrk_aligned>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	4604      	mov	r4, r0
 800660c:	d155      	bne.n	80066ba <_malloc_r+0xf2>
 800660e:	f8d8 4000 	ldr.w	r4, [r8]
 8006612:	4626      	mov	r6, r4
 8006614:	2e00      	cmp	r6, #0
 8006616:	d145      	bne.n	80066a4 <_malloc_r+0xdc>
 8006618:	2c00      	cmp	r4, #0
 800661a:	d048      	beq.n	80066ae <_malloc_r+0xe6>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	4631      	mov	r1, r6
 8006620:	4638      	mov	r0, r7
 8006622:	eb04 0903 	add.w	r9, r4, r3
 8006626:	f000 f863 	bl	80066f0 <_sbrk_r>
 800662a:	4581      	cmp	r9, r0
 800662c:	d13f      	bne.n	80066ae <_malloc_r+0xe6>
 800662e:	6821      	ldr	r1, [r4, #0]
 8006630:	1a6d      	subs	r5, r5, r1
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ffa7 	bl	8006588 <sbrk_aligned>
 800663a:	3001      	adds	r0, #1
 800663c:	d037      	beq.n	80066ae <_malloc_r+0xe6>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	442b      	add	r3, r5
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f8d8 3000 	ldr.w	r3, [r8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d038      	beq.n	80066be <_malloc_r+0xf6>
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	42a2      	cmp	r2, r4
 8006650:	d12b      	bne.n	80066aa <_malloc_r+0xe2>
 8006652:	2200      	movs	r2, #0
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	e00f      	b.n	8006678 <_malloc_r+0xb0>
 8006658:	6822      	ldr	r2, [r4, #0]
 800665a:	1b52      	subs	r2, r2, r5
 800665c:	d41f      	bmi.n	800669e <_malloc_r+0xd6>
 800665e:	2a0b      	cmp	r2, #11
 8006660:	d917      	bls.n	8006692 <_malloc_r+0xca>
 8006662:	1961      	adds	r1, r4, r5
 8006664:	42a3      	cmp	r3, r4
 8006666:	6025      	str	r5, [r4, #0]
 8006668:	bf18      	it	ne
 800666a:	6059      	strne	r1, [r3, #4]
 800666c:	6863      	ldr	r3, [r4, #4]
 800666e:	bf08      	it	eq
 8006670:	f8c8 1000 	streq.w	r1, [r8]
 8006674:	5162      	str	r2, [r4, r5]
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	4638      	mov	r0, r7
 800667a:	f104 060b 	add.w	r6, r4, #11
 800667e:	f000 f829 	bl	80066d4 <__malloc_unlock>
 8006682:	f026 0607 	bic.w	r6, r6, #7
 8006686:	1d23      	adds	r3, r4, #4
 8006688:	1af2      	subs	r2, r6, r3
 800668a:	d0ae      	beq.n	80065ea <_malloc_r+0x22>
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	50a3      	str	r3, [r4, r2]
 8006690:	e7ab      	b.n	80065ea <_malloc_r+0x22>
 8006692:	42a3      	cmp	r3, r4
 8006694:	6862      	ldr	r2, [r4, #4]
 8006696:	d1dd      	bne.n	8006654 <_malloc_r+0x8c>
 8006698:	f8c8 2000 	str.w	r2, [r8]
 800669c:	e7ec      	b.n	8006678 <_malloc_r+0xb0>
 800669e:	4623      	mov	r3, r4
 80066a0:	6864      	ldr	r4, [r4, #4]
 80066a2:	e7ac      	b.n	80065fe <_malloc_r+0x36>
 80066a4:	4634      	mov	r4, r6
 80066a6:	6876      	ldr	r6, [r6, #4]
 80066a8:	e7b4      	b.n	8006614 <_malloc_r+0x4c>
 80066aa:	4613      	mov	r3, r2
 80066ac:	e7cc      	b.n	8006648 <_malloc_r+0x80>
 80066ae:	230c      	movs	r3, #12
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4638      	mov	r0, r7
 80066b4:	f000 f80e 	bl	80066d4 <__malloc_unlock>
 80066b8:	e797      	b.n	80065ea <_malloc_r+0x22>
 80066ba:	6025      	str	r5, [r4, #0]
 80066bc:	e7dc      	b.n	8006678 <_malloc_r+0xb0>
 80066be:	605b      	str	r3, [r3, #4]
 80066c0:	deff      	udf	#255	; 0xff
 80066c2:	bf00      	nop
 80066c4:	200001f8 	.word	0x200001f8

080066c8 <__malloc_lock>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__malloc_lock+0x8>)
 80066ca:	f000 b84b 	b.w	8006764 <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	2000033c 	.word	0x2000033c

080066d4 <__malloc_unlock>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__malloc_unlock+0x8>)
 80066d6:	f000 b846 	b.w	8006766 <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	2000033c 	.word	0x2000033c

080066e0 <memset>:
 80066e0:	4402      	add	r2, r0
 80066e2:	4603      	mov	r3, r0
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d100      	bne.n	80066ea <memset+0xa>
 80066e8:	4770      	bx	lr
 80066ea:	f803 1b01 	strb.w	r1, [r3], #1
 80066ee:	e7f9      	b.n	80066e4 <memset+0x4>

080066f0 <_sbrk_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	; (800670c <_sbrk_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fb fae2 	bl	8001cc4 <_sbrk>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_sbrk_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_sbrk_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000338 	.word	0x20000338

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	2000006c 	.word	0x2000006c

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	4d0d      	ldr	r5, [pc, #52]	; (8006754 <__libc_init_array+0x38>)
 8006720:	4c0d      	ldr	r4, [pc, #52]	; (8006758 <__libc_init_array+0x3c>)
 8006722:	1b64      	subs	r4, r4, r5
 8006724:	10a4      	asrs	r4, r4, #2
 8006726:	2600      	movs	r6, #0
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	4d0b      	ldr	r5, [pc, #44]	; (800675c <__libc_init_array+0x40>)
 800672e:	4c0c      	ldr	r4, [pc, #48]	; (8006760 <__libc_init_array+0x44>)
 8006730:	f000 f81a 	bl	8006768 <_init>
 8006734:	1b64      	subs	r4, r4, r5
 8006736:	10a4      	asrs	r4, r4, #2
 8006738:	2600      	movs	r6, #0
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	f855 3b04 	ldr.w	r3, [r5], #4
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	f855 3b04 	ldr.w	r3, [r5], #4
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	08006854 	.word	0x08006854
 8006758:	08006854 	.word	0x08006854
 800675c:	08006854 	.word	0x08006854
 8006760:	0800685c 	.word	0x0800685c

08006764 <__retarget_lock_acquire_recursive>:
 8006764:	4770      	bx	lr

08006766 <__retarget_lock_release_recursive>:
 8006766:	4770      	bx	lr

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
